
External_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b1  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093e  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f5  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000709  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059a  00000000  00000000  00002d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000032cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  74:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <Dio_ChannelDirectionSet+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	71 f0       	breq	.+28     	; 0xa0 <Dio_ChannelDirectionSet+0x24>
  84:	08 95       	ret
  86:	fc 01       	movw	r30, r24
  88:	40 81       	ld	r20, Z
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <Dio_ChannelDirectionSet+0x18>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <Dio_ChannelDirectionSet+0x14>
  98:	20 95       	com	r18
  9a:	24 23       	and	r18, r20
  9c:	20 83       	st	Z, r18
  9e:	08 95       	ret
  a0:	fc 01       	movw	r30, r24
  a2:	40 81       	ld	r20, Z
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <Dio_ChannelDirectionSet+0x32>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <Dio_ChannelDirectionSet+0x2e>
  b2:	24 2b       	or	r18, r20
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
  b8:	44 23       	and	r20, r20
  ba:	19 f0       	breq	.+6      	; 0xc2 <Dio_ChannelWrite+0xa>
  bc:	41 30       	cpi	r20, 0x01	; 1
  be:	71 f0       	breq	.+28     	; 0xdc <Dio_ChannelWrite+0x24>
  c0:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Dio_ChannelWrite+0x18>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <Dio_ChannelWrite+0x14>
  d4:	20 95       	com	r18
  d6:	24 23       	and	r18, r20
  d8:	20 83       	st	Z, r18
		break;
  da:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
  dc:	fc 01       	movw	r30, r24
  de:	40 81       	ld	r20, Z
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_ChannelWrite+0x32>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_ChannelWrite+0x2e>
  ee:	24 2b       	or	r18, r20
  f0:	20 83       	st	Z, r18
  f2:	08 95       	ret

000000f4 <Dio_ChannelToggle>:
		break;
	}	
}
void Dio_ChannelToggle(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	TOGGLE_BIT(*Port_reg,Channel);
  f4:	fc 01       	movw	r30, r24
  f6:	40 81       	ld	r20, Z
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <Dio_ChannelToggle+0xe>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <Dio_ChannelToggle+0xa>
 106:	24 27       	eor	r18, r20
 108:	20 83       	st	Z, r18
 10a:	08 95       	ret

0000010c <Ext_Interrupt_ModeSet>:
		break;
		case EXT_INT1:
		CLEAR_BIT(*GENRAL_INT_CTRL_REG, INT1_SOURCE_ENABLE_BIT);
		break;
		case EXT_INT2:
		CLEAR_BIT(*GENRAL_INT_CTRL_REG, INT2_SOURCE_ENABLE_BIT);
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	f1 f0       	breq	.+60     	; 0x14c <Ext_Interrupt_ModeSet+0x40>
 110:	30 f0       	brcs	.+12     	; 0x11e <Ext_Interrupt_ModeSet+0x12>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	89 f1       	breq	.+98     	; 0x178 <Ext_Interrupt_ModeSet+0x6c>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	09 f4       	brne	.+2      	; 0x11c <Ext_Interrupt_ModeSet+0x10>
 11a:	42 c0       	rjmp	.+132    	; 0x1a0 <Ext_Interrupt_ModeSet+0x94>
 11c:	08 95       	ret
 11e:	35 b7       	in	r19, 0x35	; 53
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <Ext_Interrupt_ModeSet+0x20>
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Ext_Interrupt_ModeSet+0x1c>
 130:	2e 2f       	mov	r18, r30
 132:	20 95       	com	r18
 134:	23 23       	and	r18, r19
 136:	25 bf       	out	0x35, r18	; 53
 138:	25 b7       	in	r18, 0x35	; 53
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Ext_Interrupt_ModeSet+0x34>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	4a 95       	dec	r20
 142:	e2 f7       	brpl	.-8      	; 0x13c <Ext_Interrupt_ModeSet+0x30>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	85 bf       	out	0x35, r24	; 53
 14a:	08 95       	ret
 14c:	35 b7       	in	r19, 0x35	; 53
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <Ext_Interrupt_ModeSet+0x4e>
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Ext_Interrupt_ModeSet+0x4a>
 15e:	2e 2f       	mov	r18, r30
 160:	20 95       	com	r18
 162:	23 23       	and	r18, r19
 164:	25 bf       	out	0x35, r18	; 53
 166:	25 b7       	in	r18, 0x35	; 53
 168:	02 c0       	rjmp	.+4      	; 0x16e <Ext_Interrupt_ModeSet+0x62>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	4a 95       	dec	r20
 170:	e2 f7       	brpl	.-8      	; 0x16a <Ext_Interrupt_ModeSet+0x5e>
 172:	82 2b       	or	r24, r18
 174:	85 bf       	out	0x35, r24	; 53
 176:	08 95       	ret
 178:	55 b7       	in	r21, 0x35	; 53
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9c 01       	movw	r18, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <Ext_Interrupt_ModeSet+0x7a>
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <Ext_Interrupt_ModeSet+0x76>
 18a:	25 2b       	or	r18, r21
 18c:	25 bf       	out	0x35, r18	; 53
 18e:	25 b7       	in	r18, 0x35	; 53
 190:	02 c0       	rjmp	.+4      	; 0x196 <Ext_Interrupt_ModeSet+0x8a>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	4a 95       	dec	r20
 198:	e2 f7       	brpl	.-8      	; 0x192 <Ext_Interrupt_ModeSet+0x86>
 19a:	82 2b       	or	r24, r18
 19c:	85 bf       	out	0x35, r24	; 53
 19e:	08 95       	ret
 1a0:	55 b7       	in	r21, 0x35	; 53
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	9c 01       	movw	r18, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Ext_Interrupt_ModeSet+0xa2>
 1aa:	22 0f       	add	r18, r18
 1ac:	33 1f       	adc	r19, r19
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Ext_Interrupt_ModeSet+0x9e>
 1b2:	25 2b       	or	r18, r21
 1b4:	25 bf       	out	0x35, r18	; 53
 1b6:	25 b7       	in	r18, 0x35	; 53
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Ext_Interrupt_ModeSet+0xb2>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	4a 95       	dec	r20
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Ext_Interrupt_ModeSet+0xae>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	85 bf       	out	0x35, r24	; 53
 1c8:	08 95       	ret

000001ca <Ext_Interrupts_Enable>:
 1ca:	96 2f       	mov	r25, r22
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	69 f0       	breq	.+26     	; 0x1ea <Ext_Interrupts_Enable+0x20>
 1d0:	18 f0       	brcs	.+6      	; 0x1d8 <Ext_Interrupts_Enable+0xe>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	99 f0       	breq	.+38     	; 0x1fc <Ext_Interrupts_Enable+0x32>
 1d6:	08 95       	ret
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	89 2f       	mov	r24, r25
 1de:	0e 94 86 00 	call	0x10c	; 0x10c <Ext_Interrupt_ModeSet>
 1e2:	8b b7       	in	r24, 0x3b	; 59
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	8b bf       	out	0x3b, r24	; 59
 1e8:	08 95       	ret
 1ea:	43 e0       	ldi	r20, 0x03	; 3
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	89 2f       	mov	r24, r25
 1f0:	0e 94 86 00 	call	0x10c	; 0x10c <Ext_Interrupt_ModeSet>
 1f4:	8b b7       	in	r24, 0x3b	; 59
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	8b bf       	out	0x3b, r24	; 59
 1fa:	08 95       	ret
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	19 f0       	breq	.+6      	; 0x206 <Ext_Interrupts_Enable+0x3c>
 200:	62 30       	cpi	r22, 0x02	; 2
 202:	29 f0       	breq	.+10     	; 0x20e <Ext_Interrupts_Enable+0x44>
 204:	07 c0       	rjmp	.+14     	; 0x214 <Ext_Interrupts_Enable+0x4a>
 206:	84 b7       	in	r24, 0x34	; 52
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	84 bf       	out	0x34, r24	; 52
 20c:	03 c0       	rjmp	.+6      	; 0x214 <Ext_Interrupts_Enable+0x4a>
 20e:	84 b7       	in	r24, 0x34	; 52
 210:	80 64       	ori	r24, 0x40	; 64
 212:	84 bf       	out	0x34, r24	; 52
 214:	8b b7       	in	r24, 0x3b	; 59
 216:	80 62       	ori	r24, 0x20	; 32
 218:	8b bf       	out	0x3b, r24	; 59
 21a:	08 95       	ret

0000021c <Global_Interrupts_StateSet>:
		break;
	}
}
void Global_Interrupts_StateSet(GlobalInt_StateEnum_t State)
{
	switch(State)
 21c:	88 23       	and	r24, r24
 21e:	19 f0       	breq	.+6      	; 0x226 <Global_Interrupts_StateSet+0xa>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	29 f0       	breq	.+10     	; 0x22e <Global_Interrupts_StateSet+0x12>
 224:	08 95       	ret
	{
		case GLOBAL_INT_DISABLE:
		CLEAR_BIT(*AVR_STATUS_REG, GLOBAL_INTERRUPTS_ENABLE_BIT);
 226:	8f b7       	in	r24, 0x3f	; 63
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	8f bf       	out	0x3f, r24	; 63
		break;
 22c:	08 95       	ret
		case GLOBAL_INT_ENABLE:
		SET_BIT(*AVR_STATUS_REG, GLOBAL_INTERRUPTS_ENABLE_BIT);
 22e:	8f b7       	in	r24, 0x3f	; 63
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8f bf       	out	0x3f, r24	; 63
 234:	08 95       	ret

00000236 <Led_Init>:
#include "Led.h"
#include "Dio.h"

void Led_Init(volatile uint8 *Led_reg, LedEnum_t Led_no)
{
	Dio_ChannelDirectionSet(Led_reg, Led_no, DIO_OUTPUT);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_ChannelDirectionSet>
 23c:	08 95       	ret

0000023e <Led_StateSet>:
}
void Led_StateSet(volatile uint8 *Led_reg, LedEnum_t Led_no, LedStateEnum_t state)
{
	if (state == LED_TOGGLE)
 23e:	42 30       	cpi	r20, 0x02	; 2
 240:	19 f4       	brne	.+6      	; 0x248 <Led_StateSet+0xa>
	{
		Dio_ChannelToggle(Led_reg, Led_no);
 242:	0e 94 7a 00 	call	0xf4	; 0xf4 <Dio_ChannelToggle>
 246:	08 95       	ret
	}
	else
	{
		Dio_ChannelWrite(Led_reg, Led_no, state);
 248:	0e 94 5c 00 	call	0xb8	; 0xb8 <Dio_ChannelWrite>
 24c:	08 95       	ret

0000024e <__vector_1>:
#include "Led.h"
#include "Sw.h"
#include <avr/interrupt.h>

ISR(INT0_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	/* Toggle LED */
	Led_StateSet(LED0_1_OUT_REG, LED0, LED_TOGGLE);
 270:	42 e0       	ldi	r20, 0x02	; 2
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	85 e3       	ldi	r24, 0x35	; 53
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 1f 01 	call	0x23e	; 0x23e <Led_StateSet>
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <main>:

int main(void)
{
    Ext_Interrupts_Enable(EXT_INT0, EXT_INT_RISING_EDGE);
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Ext_Interrupts_Enable>
	Global_Interrupts_StateSet(GLOBAL_INT_ENABLE);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 0e 01 	call	0x21c	; 0x21c <Global_Interrupts_StateSet>
	Sw_init(SW1_2_DIR_REG, SW2);
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	81 e3       	ldi	r24, 0x31	; 49
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Sw_init>
	Led_Init(LED0_1_DIR_REG, LED0);
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 1b 01 	call	0x236	; 0x236 <Led_Init>
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <main+0x22>

000002c2 <Sw_init>:
#define DEBOUNCE_PERIOD (20U)

DioPinStateEnum_t Sw_PrevState = SW_RELEASED;
void Sw_init(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Dio_ChannelDirectionSet   (Sw_Reg, Sw_no, DIO_INPUT);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_ChannelDirectionSet>
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
