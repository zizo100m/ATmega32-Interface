
External_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001032  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000902  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061b  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000705  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000569  00000000  00000000  00002c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  74:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <Dio_ChannelDirectionSet+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	71 f0       	breq	.+28     	; 0xa0 <Dio_ChannelDirectionSet+0x24>
  84:	08 95       	ret
  86:	fc 01       	movw	r30, r24
  88:	40 81       	ld	r20, Z
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <Dio_ChannelDirectionSet+0x18>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <Dio_ChannelDirectionSet+0x14>
  98:	20 95       	com	r18
  9a:	24 23       	and	r18, r20
  9c:	20 83       	st	Z, r18
  9e:	08 95       	ret
  a0:	fc 01       	movw	r30, r24
  a2:	40 81       	ld	r20, Z
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <Dio_ChannelDirectionSet+0x32>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <Dio_ChannelDirectionSet+0x2e>
  b2:	24 2b       	or	r18, r20
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
  b8:	44 23       	and	r20, r20
  ba:	19 f0       	breq	.+6      	; 0xc2 <Dio_ChannelWrite+0xa>
  bc:	41 30       	cpi	r20, 0x01	; 1
  be:	71 f0       	breq	.+28     	; 0xdc <Dio_ChannelWrite+0x24>
  c0:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Dio_ChannelWrite+0x18>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <Dio_ChannelWrite+0x14>
  d4:	20 95       	com	r18
  d6:	24 23       	and	r18, r20
  d8:	20 83       	st	Z, r18
		break;
  da:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
  dc:	fc 01       	movw	r30, r24
  de:	40 81       	ld	r20, Z
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_ChannelWrite+0x32>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_ChannelWrite+0x2e>
  ee:	24 2b       	or	r18, r20
  f0:	20 83       	st	Z, r18
  f2:	08 95       	ret

000000f4 <Dio_ChannelToggle>:
		break;
	}	
}
void Dio_ChannelToggle(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	TOGGLE_BIT(*Port_reg,Channel);
  f4:	fc 01       	movw	r30, r24
  f6:	40 81       	ld	r20, Z
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <Dio_ChannelToggle+0xe>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <Dio_ChannelToggle+0xa>
 106:	24 27       	eor	r18, r20
 108:	20 83       	st	Z, r18
 10a:	08 95       	ret

0000010c <ExtInterrupt_Enable>:
		break;
		case EXT_INT1:
		CLEAR_BIT(*GENRAL_INT_CTRL_REG, INT1_ENABLE_BIT);
		break;
		case EXT_INT2:
		CLEAR_BIT(*GENRAL_INT_CTRL_REG, INT2_ENABLE_BIT);
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	59 f1       	breq	.+86     	; 0x166 <ExtInterrupt_Enable+0x5a>
 110:	20 f0       	brcs	.+8      	; 0x11a <ExtInterrupt_Enable+0xe>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	09 f4       	brne	.+2      	; 0x118 <ExtInterrupt_Enable+0xc>
 116:	4d c0       	rjmp	.+154    	; 0x1b2 <ExtInterrupt_Enable+0xa6>
 118:	08 95       	ret
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	99 f0       	breq	.+38     	; 0x144 <ExtInterrupt_Enable+0x38>
 11e:	c8 f0       	brcs	.+50     	; 0x152 <ExtInterrupt_Enable+0x46>
 120:	62 30       	cpi	r22, 0x02	; 2
 122:	49 f0       	breq	.+18     	; 0x136 <ExtInterrupt_Enable+0x2a>
 124:	63 30       	cpi	r22, 0x03	; 3
 126:	d9 f4       	brne	.+54     	; 0x15e <ExtInterrupt_Enable+0x52>
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	85 bf       	out	0x35, r24	; 53
 12e:	85 b7       	in	r24, 0x35	; 53
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 bf       	out	0x35, r24	; 53
 134:	14 c0       	rjmp	.+40     	; 0x15e <ExtInterrupt_Enable+0x52>
 136:	85 b7       	in	r24, 0x35	; 53
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	85 bf       	out	0x35, r24	; 53
 13c:	85 b7       	in	r24, 0x35	; 53
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	85 bf       	out	0x35, r24	; 53
 142:	0d c0       	rjmp	.+26     	; 0x15e <ExtInterrupt_Enable+0x52>
 144:	85 b7       	in	r24, 0x35	; 53
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	85 bf       	out	0x35, r24	; 53
 14a:	85 b7       	in	r24, 0x35	; 53
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	85 bf       	out	0x35, r24	; 53
 150:	06 c0       	rjmp	.+12     	; 0x15e <ExtInterrupt_Enable+0x52>
 152:	85 b7       	in	r24, 0x35	; 53
 154:	81 60       	ori	r24, 0x01	; 1
 156:	85 bf       	out	0x35, r24	; 53
 158:	85 b7       	in	r24, 0x35	; 53
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 bf       	out	0x35, r24	; 53
 15e:	8b b7       	in	r24, 0x3b	; 59
 160:	80 64       	ori	r24, 0x40	; 64
 162:	8b bf       	out	0x3b, r24	; 59
 164:	08 95       	ret
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	99 f0       	breq	.+38     	; 0x190 <ExtInterrupt_Enable+0x84>
 16a:	c8 f0       	brcs	.+50     	; 0x19e <ExtInterrupt_Enable+0x92>
 16c:	62 30       	cpi	r22, 0x02	; 2
 16e:	49 f0       	breq	.+18     	; 0x182 <ExtInterrupt_Enable+0x76>
 170:	63 30       	cpi	r22, 0x03	; 3
 172:	d9 f4       	brne	.+54     	; 0x1aa <ExtInterrupt_Enable+0x9e>
 174:	85 b7       	in	r24, 0x35	; 53
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	85 bf       	out	0x35, r24	; 53
 17a:	85 b7       	in	r24, 0x35	; 53
 17c:	87 7f       	andi	r24, 0xF7	; 247
 17e:	85 bf       	out	0x35, r24	; 53
 180:	14 c0       	rjmp	.+40     	; 0x1aa <ExtInterrupt_Enable+0x9e>
 182:	85 b7       	in	r24, 0x35	; 53
 184:	84 60       	ori	r24, 0x04	; 4
 186:	85 bf       	out	0x35, r24	; 53
 188:	85 b7       	in	r24, 0x35	; 53
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	85 bf       	out	0x35, r24	; 53
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <ExtInterrupt_Enable+0x9e>
 190:	85 b7       	in	r24, 0x35	; 53
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	85 bf       	out	0x35, r24	; 53
 196:	85 b7       	in	r24, 0x35	; 53
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	85 bf       	out	0x35, r24	; 53
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <ExtInterrupt_Enable+0x9e>
 19e:	85 b7       	in	r24, 0x35	; 53
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	85 bf       	out	0x35, r24	; 53
 1a4:	85 b7       	in	r24, 0x35	; 53
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	85 bf       	out	0x35, r24	; 53
 1aa:	8b b7       	in	r24, 0x3b	; 59
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	8b bf       	out	0x3b, r24	; 59
 1b0:	08 95       	ret
 1b2:	66 23       	and	r22, r22
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <ExtInterrupt_Enable+0xb6>
 1b6:	61 30       	cpi	r22, 0x01	; 1
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <ExtInterrupt_Enable+0xbc>
 1ba:	84 b7       	in	r24, 0x34	; 52
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	84 bf       	out	0x34, r24	; 52
 1c0:	08 95       	ret
 1c2:	84 b7       	in	r24, 0x34	; 52
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	84 bf       	out	0x34, r24	; 52
 1c8:	08 95       	ret

000001ca <GlobaleInterrupts_StateSet>:
		break;
	}	
}
void GlobaleInterrupts_StateSet(GlobalInterruptsStateEnum_t State)
{
	switch(State)
 1ca:	88 23       	and	r24, r24
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <GlobaleInterrupts_StateSet+0xa>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	29 f0       	breq	.+10     	; 0x1dc <GlobaleInterrupts_StateSet+0x12>
 1d2:	08 95       	ret
	{
		case GLOBAL_INTERRUPTS_DISABLE:
		CLEAR_BIT(*AVR_STATUS_REG, GLOBALE_INTERRUPTS_ENABLE_BIT);
 1d4:	8f b7       	in	r24, 0x3f	; 63
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	8f bf       	out	0x3f, r24	; 63
		break;
 1da:	08 95       	ret
		case GLOBAL_INTERRUPTS_ENABLE:
		SET_BIT(*AVR_STATUS_REG, GLOBALE_INTERRUPTS_ENABLE_BIT);
 1dc:	8f b7       	in	r24, 0x3f	; 63
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	8f bf       	out	0x3f, r24	; 63
 1e2:	08 95       	ret

000001e4 <Led_Init>:
#include "Led.h"
#include "Dio.h"

void Led_Init(volatile uint8 *Led_reg, LedEnum_t Led_no)
{
	Dio_ChannelDirectionSet(Led_reg, Led_no, DIO_OUTPUT);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_ChannelDirectionSet>
 1ea:	08 95       	ret

000001ec <Led_StateSet>:
}
void Led_StateSet(volatile uint8 *Led_reg, LedEnum_t Led_no, LedStateEnum_t state)
{
	if (state == LED_TOGGLE)
 1ec:	42 30       	cpi	r20, 0x02	; 2
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <Led_StateSet+0xa>
	{
		Dio_ChannelToggle(Led_reg, Led_no);
 1f0:	0e 94 7a 00 	call	0xf4	; 0xf4 <Dio_ChannelToggle>
 1f4:	08 95       	ret
	}
	else
	{
		Dio_ChannelWrite(Led_reg, Led_no, state);
 1f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <Dio_ChannelWrite>
 1fa:	08 95       	ret

000001fc <__vector_1>:
#include "Led.h"
#include "Sw.h"
#include <avr/interrupt.h>

ISR(INT0_vect)
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	/* Toggle LED */
	Led_StateSet(LED0_1_OUT_REG, LED0, LED_TOGGLE);
 21e:	42 e0       	ldi	r20, 0x02	; 2
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	85 e3       	ldi	r24, 0x35	; 53
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Led_StateSet>
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <main>:

int main(void)
{
    ExtInterrupt_Enable(EXT_INT0, RISING_EDGE_MODE);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 86 00 	call	0x10c	; 0x10c <ExtInterrupt_Enable>
	GlobaleInterrupts_StateSet(GLOBAL_INTERRUPTS_ENABLE);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 e5 00 	call	0x1ca	; 0x1ca <GlobaleInterrupts_StateSet>
	Sw_init(SW1_2_DIR_REG, SW2);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	81 e3       	ldi	r24, 0x31	; 49
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 38 01 	call	0x270	; 0x270 <Sw_init>
	Led_Init(LED0_1_DIR_REG, LED0);
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	84 e3       	ldi	r24, 0x34	; 52
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Led_Init>
 26e:	ff cf       	rjmp	.-2      	; 0x26e <main+0x22>

00000270 <Sw_init>:
#define DEBOUNCE_PERIOD (20U)

DioPinStateEnum_t Sw_PrevState = SW_RELEASED;
void Sw_init(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Dio_ChannelDirectionSet   (Sw_Reg, Sw_no, DIO_INPUT);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_ChannelDirectionSet>
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
