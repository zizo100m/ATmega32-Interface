
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000088e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000088e  00000902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000197b  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a83  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000930  00000000  00000000  00002e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008be  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5a  00000000  00000000  00004266  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
  8a:	0c 94 45 04 	jmp	0x88a	; 0x88a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Send_Instruction>:
			u8LocalLineAddress = Col | LCD_4TH_LINE_BASE;
			break;
		default:
			break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);	
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
  ae:	8f e9       	ldi	r24, 0x9F	; 159
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Send_Instruction+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_Send_Instruction+0x26>
  b8:	00 00       	nop
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_Send_Instruction+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_Send_Instruction+0x3e>
  d0:	00 00       	nop
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	9c 2f       	mov	r25, r28
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 2b       	or	r24, r25
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	8f e9       	ldi	r24, 0x9F	; 159
  e4:	9f e0       	ldi	r25, 0x0F	; 15
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Send_Instruction+0x54>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_Send_Instruction+0x5a>
  ec:	00 00       	nop
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Send_Instruction+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Send_Instruction+0x72>
 104:	00 00       	nop
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Send_Instruction+0x84>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Send_Instruction+0x8a>
 11c:	00 00       	nop
 11e:	8b b3       	in	r24, 0x1b	; 27
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	8b bb       	out	0x1b, r24	; 27
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	c2 95       	swap	r28
 128:	c0 7f       	andi	r28, 0xF0	; 240
 12a:	c8 2b       	or	r28, r24
 12c:	cb bb       	out	0x1b, r28	; 27
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Send_Instruction+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Send_Instruction+0xa6>
 138:	00 00       	nop
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Send_Instruction+0xb8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Send_Instruction+0xbe>
 150:	00 00       	nop
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_Init>:
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <LCD_Init+0x6>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x10>
 166:	00 00       	nop
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	87 e3       	ldi	r24, 0x37	; 55
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 a7 01 	call	0x34e	; 0x34e <Dio_ChannelDirectionSet>
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	87 e3       	ldi	r24, 0x37	; 55
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 a7 01 	call	0x34e	; 0x34e <Dio_ChannelDirectionSet>
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	63 e0       	ldi	r22, 0x03	; 3
 184:	87 e3       	ldi	r24, 0x37	; 55
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 a7 01 	call	0x34e	; 0x34e <Dio_ChannelDirectionSet>
 18c:	8a b3       	in	r24, 0x1a	; 26
 18e:	80 6f       	ori	r24, 0xF0	; 240
 190:	8a bb       	out	0x1a, r24	; 26
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 1aa:	08 95       	ret

000001ac <LCD_Clear>:
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 1b2:	08 95       	ret

000001b4 <LCD_CharDisplay>:
}
void LCD_CharDisplay(uint8 Data)
{
 1b4:	cf 93       	push	r28
 1b6:	c8 2f       	mov	r28, r24
	/* !Comment: RW  Should be 0  and RS should be 1 when Writing Data to LCD */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);	
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	88 e3       	ldi	r24, 0x38	; 56
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	8f e9       	ldi	r24, 0x9F	; 159
 1d2:	9f e0       	ldi	r25, 0x0F	; 15
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_CharDisplay+0x20>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_CharDisplay+0x26>
 1da:	00 00       	nop
	/* !Comment: Delay of Address Set 60ns minimum */
	_delay_ms(1);
	/* !Comment: Enable LCD E=1 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	88 e3       	ldi	r24, 0x38	; 56
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_CharDisplay+0x38>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_CharDisplay+0x3e>
 1f2:	00 00       	nop
	_delay_ms(1);
#if LCD_EIGHTBIT_DATA
	Dio_PortWrite(LCD_DATA_OUT_REG, Data);
#else
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 1f4:	8b b3       	in	r24, 0x1b	; 27
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= (Data & 0xF0U);
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	9c 2f       	mov	r25, r28
 1fe:	90 7f       	andi	r25, 0xF0	; 240
 200:	89 2b       	or	r24, r25
 202:	8b bb       	out	0x1b, r24	; 27
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_CharDisplay+0x54>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_CharDisplay+0x5a>
 20e:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_CharDisplay+0x6c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_CharDisplay+0x72>
 226:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
	
	/* !Comment: Enable LCD E=1  (To write the other 4-bit of the instruction)*/
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
 234:	8f e9       	ldi	r24, 0x9F	; 159
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_CharDisplay+0x84>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_CharDisplay+0x8a>
 23e:	00 00       	nop
	/* !Comment: Delay for processing PW min 450ns */
	_delay_ms(1);
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= ((Data << 4U) & 0xF0U);
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	c2 95       	swap	r28
 24a:	c0 7f       	andi	r28, 0xF0	; 240
 24c:	c8 2b       	or	r28, r24
 24e:	cb bb       	out	0x1b, r28	; 27
 250:	8f e9       	ldi	r24, 0x9F	; 159
 252:	9f e0       	ldi	r25, 0x0F	; 15
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_CharDisplay+0xa0>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_CharDisplay+0xa6>
 25a:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	88 e3       	ldi	r24, 0x38	; 56
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 c5 01 	call	0x38a	; 0x38a <Dio_ChannelWrite>
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_CharDisplay+0xb8>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_CharDisplay+0xbe>
 272:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);	
#endif
}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <LCD_StringDisplay>:

void LCD_StringDisplay(char *Str)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
	while(*Str != '\0')
 27e:	03 c0       	rjmp	.+6      	; 0x286 <LCD_StringDisplay+0xe>
	{
		LCD_CharDisplay(*Str);
 280:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_CharDisplay>
		Str++;
 284:	21 96       	adiw	r28, 0x01	; 1
#endif
}

void LCD_StringDisplay(char *Str)
{
	while(*Str != '\0')
 286:	88 81       	ld	r24, Y
 288:	81 11       	cpse	r24, r1
 28a:	fa cf       	rjmp	.-12     	; 0x280 <LCD_StringDisplay+0x8>
	{
		LCD_CharDisplay(*Str);
		Str++;
	}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCD_IntegerDisplay>:

void LCD_IntegerDisplay(sint32 Data)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	61 97       	sbiw	r28, 0x11	; 17
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	dc 01       	movw	r26, r24
 2a8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2aa:	4a e0       	ldi	r20, 0x0A	; 10
 2ac:	be 01       	movw	r22, r28
 2ae:	6f 5f       	subi	r22, 0xFF	; 255
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	0e 94 10 04 	call	0x820	; 0x820 <__itoa_ncheck>
	/* !Comment: String to hold the ascii result */
	char au8LocalResult[17];
	/* !Comment: 10 for decimal */
	itoa(Data, au8LocalResult, 10);
	/* !Comment: Display The Result */
	LCD_StringDisplay(au8LocalResult);
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_StringDisplay>
 2be:	61 96       	adiw	r28, 0x11	; 17
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <main>:
#include "Icu.h"
#include "LCD.h"
#include <util/delay.h>

int main(void)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <main+0x6>
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <main+0x8>
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
	Icu_Init(&gStrIcu_Configuration);
 2dc:	80 e6       	ldi	r24, 0x60	; 96
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Icu_Init>
	LCD_Init();
 2e4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Init>
	Icu_DutyCycleType u16LocalDutyValues;
	uint8 u8LocalDutyCyle = 0;
    while (1) 
    {
		Icu_GetDutyCycleValues(ICU_CHANNEL_0, &u16LocalDutyValues);
 2e8:	be 01       	movw	r22, r28
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 2d 02 	call	0x45a	; 0x45a <Icu_GetDutyCycleValues>
		u8LocalDutyCyle = ((float32)u16LocalDutyValues.ActiveTime / (float32)u16LocalDutyValues.PeriodTime) * 100U; 
 2f4:	69 81       	ldd	r22, Y+1	; 0x01
 2f6:	7a 81       	ldd	r23, Y+2	; 0x02
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 15 03 	call	0x62a	; 0x62a <__floatunsisf>
 300:	6b 01       	movw	r12, r22
 302:	7c 01       	movw	r14, r24
 304:	6b 81       	ldd	r22, Y+3	; 0x03
 306:	7c 81       	ldd	r23, Y+4	; 0x04
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 15 03 	call	0x62a	; 0x62a <__floatunsisf>
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__divsf3>
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	48 ec       	ldi	r20, 0xC8	; 200
 322:	52 e4       	ldi	r21, 0x42	; 66
 324:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
 328:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fixunssfsi>
		LCD_IntegerDisplay(u8LocalDutyCyle);
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 49 01 	call	0x292	; 0x292 <LCD_IntegerDisplay>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	83 ec       	ldi	r24, 0xC3	; 195
 33a:	99 e0       	ldi	r25, 0x09	; 9
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x6c>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x76>
 346:	00 00       	nop
		_delay_ms(200);
		LCD_Clear();
 348:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
 34c:	cd cf       	rjmp	.-102    	; 0x2e8 <main+0x18>

0000034e <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
 34e:	44 23       	and	r20, r20
 350:	19 f0       	breq	.+6      	; 0x358 <Dio_ChannelDirectionSet+0xa>
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	71 f0       	breq	.+28     	; 0x372 <Dio_ChannelDirectionSet+0x24>
 356:	08 95       	ret
 358:	fc 01       	movw	r30, r24
 35a:	40 81       	ld	r20, Z
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <Dio_ChannelDirectionSet+0x18>
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <Dio_ChannelDirectionSet+0x14>
 36a:	20 95       	com	r18
 36c:	24 23       	and	r18, r20
 36e:	20 83       	st	Z, r18
 370:	08 95       	ret
 372:	fc 01       	movw	r30, r24
 374:	40 81       	ld	r20, Z
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <Dio_ChannelDirectionSet+0x32>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <Dio_ChannelDirectionSet+0x2e>
 384:	24 2b       	or	r18, r20
 386:	20 83       	st	Z, r18
 388:	08 95       	ret

0000038a <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
 38a:	44 23       	and	r20, r20
 38c:	19 f0       	breq	.+6      	; 0x394 <Dio_ChannelWrite+0xa>
 38e:	41 30       	cpi	r20, 0x01	; 1
 390:	71 f0       	breq	.+28     	; 0x3ae <Dio_ChannelWrite+0x24>
 392:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
 394:	fc 01       	movw	r30, r24
 396:	40 81       	ld	r20, Z
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Dio_ChannelWrite+0x18>
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <Dio_ChannelWrite+0x14>
 3a6:	20 95       	com	r18
 3a8:	24 23       	and	r18, r20
 3aa:	20 83       	st	Z, r18
		break;
 3ac:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
 3ae:	fc 01       	movw	r30, r24
 3b0:	40 81       	ld	r20, Z
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Dio_ChannelWrite+0x32>
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <Dio_ChannelWrite+0x2e>
 3c0:	24 2b       	or	r18, r20
 3c2:	20 83       	st	Z, r18
 3c4:	08 95       	ret

000003c6 <Icu_Init>:
#include "Icu.h"
#include "Atmega32_Cfg.h"
#include "Macros.h"

void Icu_Init(const Icu_ConfigType *ConfigPtr)
{
 3c6:	fc 01       	movw	r30, r24
	/* !Comment: Configure ICP1/PD6 as i/p pin */
	SET_BIT(*PORTD_DIR_REG, ICU_ICP_PIN);
 3c8:	91 b3       	in	r25, 0x11	; 17
 3ca:	90 64       	ori	r25, 0x40	; 64
 3cc:	91 bb       	out	0x11, r25	; 17
	switch(ConfigPtr->Channel)
 3ce:	80 81       	ld	r24, Z
 3d0:	81 11       	cpse	r24, r1
 3d2:	1f c0       	rjmp	.+62     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		case ICU_CHANNEL_0:
			/* !Comment: Clear Registers before applying configuration */
			*TIMER1_CTRL_A_REG = 0x00U;
 3d4:	1f bc       	out	0x2f, r1	; 47
			*TIMER1_CTRL_B_REG = 0x00U;
 3d6:	1e bc       	out	0x2e, r1	; 46
			/* !Comment: Apply configuration */
			switch(ConfigPtr->ActivationEdge)
 3d8:	82 81       	ldd	r24, Z+2	; 0x02
 3da:	88 23       	and	r24, r24
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <Icu_Init+0x1e>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	29 f0       	breq	.+10     	; 0x3ec <Icu_Init+0x26>
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <Icu_Init+0x2c>
			{
			case ICU_RISING_EDGE:
				SET_BIT(*TIMER1_CTRL_B_REG, ICU_INP_CAP_EDGE_SELECT_BIT);
 3e4:	8e b5       	in	r24, 0x2e	; 46
 3e6:	80 64       	ori	r24, 0x40	; 64
 3e8:	8e bd       	out	0x2e, r24	; 46
				break;
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <Icu_Init+0x2c>
			case ICU_FALLING_EDGE:
				CLEAR_BIT(*TIMER1_CTRL_B_REG, ICU_INP_CAP_EDGE_SELECT_BIT);
 3ec:	8e b5       	in	r24, 0x2e	; 46
 3ee:	8f 7b       	andi	r24, 0xBF	; 191
 3f0:	8e bd       	out	0x2e, r24	; 46
				break;
			default:
				break;
			}
			*TIMER1_CTRL_B_REG |= ConfigPtr->Prescale;
 3f2:	9e b5       	in	r25, 0x2e	; 46
 3f4:	81 81       	ldd	r24, Z+1	; 0x01
 3f6:	89 2b       	or	r24, r25
 3f8:	8e bd       	out	0x2e, r24	; 46
			/* !Comment: Initial Value for Timer1 */
			*(uint16 *)TIMER1_COUNTER_LOW_REG = 0x00U;
 3fa:	1d bc       	out	0x2d, r1	; 45
 3fc:	1c bc       	out	0x2c, r1	; 44
			/* !Comment: Initial Value for the input capture register */
			*(uint16 *)TIMER1_INP_CAP_LOW_REG = 0x00U;
 3fe:	17 bc       	out	0x27, r1	; 39
 400:	16 bc       	out	0x26, r1	; 38
			/* !Comment: Set The interrupt State */
			*TIMER_INT_MASK_REG |= (ConfigPtr->IntState << ICU_INT_ENABLE_BIT);
 402:	29 b7       	in	r18, 0x39	; 57
 404:	93 81       	ldd	r25, Z+3	; 0x03
 406:	30 e2       	ldi	r19, 0x20	; 32
 408:	93 9f       	mul	r25, r19
 40a:	c0 01       	movw	r24, r0
 40c:	11 24       	eor	r1, r1
 40e:	82 2b       	or	r24, r18
 410:	89 bf       	out	0x39, r24	; 57
 412:	08 95       	ret

00000414 <Icu_SetActivationCondition>:
	}
}

void Icu_SetActivationCondition(Icu_ChannelType Channel, Icu_ActivationType Activation)
{
	switch(Channel)
 414:	81 11       	cpse	r24, r1
 416:	0c c0       	rjmp	.+24     	; 0x430 <Icu_SetActivationCondition+0x1c>
	{
		case ICU_CHANNEL_0:
		switch(Activation)
 418:	66 23       	and	r22, r22
 41a:	19 f0       	breq	.+6      	; 0x422 <Icu_SetActivationCondition+0xe>
 41c:	61 30       	cpi	r22, 0x01	; 1
 41e:	29 f0       	breq	.+10     	; 0x42a <Icu_SetActivationCondition+0x16>
 420:	08 95       	ret
		{
		case ICU_RISING_EDGE:
			SET_BIT(*TIMER1_CTRL_B_REG, ICU_INP_CAP_EDGE_SELECT_BIT);
 422:	8e b5       	in	r24, 0x2e	; 46
 424:	80 64       	ori	r24, 0x40	; 64
 426:	8e bd       	out	0x2e, r24	; 46
			break;
 428:	08 95       	ret
		case ICU_FALLING_EDGE:
			CLEAR_BIT(*TIMER1_CTRL_B_REG, ICU_INP_CAP_EDGE_SELECT_BIT);
 42a:	8e b5       	in	r24, 0x2e	; 46
 42c:	8f 7b       	andi	r24, 0xBF	; 191
 42e:	8e bd       	out	0x2e, r24	; 46
 430:	08 95       	ret

00000432 <Icu_ClearTimerValue>:
	}
}

void Icu_ClearTimerValue(void)
{
	*(uint16 *)TIMER1_COUNTER_LOW_REG = 0x00U;
 432:	1d bc       	out	0x2d, r1	; 45
 434:	1c bc       	out	0x2c, r1	; 44
 436:	08 95       	ret

00000438 <Icu_GetInputCaptureValue>:
Icu_ValueType Icu_GetInputCaptureValue(void)
{
	Icu_ValueType u16LocalInpCapValue;
	u16LocalInpCapValue = *(uint16 *)TIMER1_INP_CAP_LOW_REG;
	return (u16LocalInpCapValue);
}
 438:	86 b5       	in	r24, 0x26	; 38
 43a:	97 b5       	in	r25, 0x27	; 39
 43c:	08 95       	ret

0000043e <ICU_StatusGet>:

ICU_StatusType ICU_StatusGet(Icu_ChannelType Channel)
{
	ICU_StatusType enuLocalIcuStatus = ICU_STATUS_RUNNING;
	switch(Channel)
 43e:	81 11       	cpse	r24, r1
 440:	08 c0       	rjmp	.+16     	; 0x452 <ICU_StatusGet+0x14>
	{
		case ICU_CHANNEL_0:

			if (READ_BIT(*TIMER_INT_FLAG_REG, ICU_INP_CAP_FLAG))
 442:	08 b6       	in	r0, 0x38	; 56
 444:	05 fe       	sbrs	r0, 5
 446:	07 c0       	rjmp	.+14     	; 0x456 <ICU_StatusGet+0x18>
			{
				enuLocalIcuStatus = ICU_STATUS_EVENT_CAP;
				/* !Comment: Clear The ICF1 bit */
				SET_BIT(*TIMER_INT_FLAG_REG, ICU_INP_CAP_FLAG);
 448:	88 b7       	in	r24, 0x38	; 56
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	88 bf       	out	0x38, r24	; 56
	{
		case ICU_CHANNEL_0:

			if (READ_BIT(*TIMER_INT_FLAG_REG, ICU_INP_CAP_FLAG))
			{
				enuLocalIcuStatus = ICU_STATUS_EVENT_CAP;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
	return (u16LocalInpCapValue);
}

ICU_StatusType ICU_StatusGet(Icu_ChannelType Channel)
{
	ICU_StatusType enuLocalIcuStatus = ICU_STATUS_RUNNING;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
 456:	80 e0       	ldi	r24, 0x00	; 0

		default:
			break;
	}
	return (enuLocalIcuStatus);
}
 458:	08 95       	ret

0000045a <Icu_GetDutyCycleValues>:

void Icu_GetDutyCycleValues(Icu_ChannelType Channel, Icu_DutyCycleType* DutyCycleValues)
{
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
	Icu_ValueType u16ValueAtStartFirstRising = 0U;
	Icu_ValueType u16ValueAtStartFalling = 0U;
	Icu_ValueType u16ValueAtStartSecondRising = 0U;

	switch(Channel)
 466:	81 11       	cpse	r24, r1
 468:	38 c0       	rjmp	.+112    	; 0x4da <Icu_GetDutyCycleValues+0x80>
 46a:	8b 01       	movw	r16, r22
	{
		case ICU_CHANNEL_0:
			/* !Comment: Clear The ICF1 bit */
			SET_BIT(*TIMER_INT_FLAG_REG, ICU_INP_CAP_FLAG);
 46c:	88 b7       	in	r24, 0x38	; 56
 46e:	80 62       	ori	r24, 0x20	; 32
 470:	88 bf       	out	0x38, r24	; 56
			Icu_ClearTimerValue();
 472:	0e 94 19 02 	call	0x432	; 0x432 <Icu_ClearTimerValue>

			Icu_SetActivationCondition(ICU_CHANNEL_0, ICU_RISING_EDGE);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 0a 02 	call	0x414	; 0x414 <Icu_SetActivationCondition>
			while(ICU_StatusGet(ICU_CHANNEL_0) != ICU_STATUS_EVENT_CAP)
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 1f 02 	call	0x43e	; 0x43e <ICU_StatusGet>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	d9 f7       	brne	.-10     	; 0x47e <Icu_GetDutyCycleValues+0x24>
			{
				/* Do Nothing */
			}
			u16ValueAtStartFirstRising = Icu_GetInputCaptureValue();
 488:	0e 94 1c 02 	call	0x438	; 0x438 <Icu_GetInputCaptureValue>
 48c:	7c 01       	movw	r14, r24

			Icu_SetActivationCondition(ICU_CHANNEL_0, ICU_FALLING_EDGE);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 0a 02 	call	0x414	; 0x414 <Icu_SetActivationCondition>
			while(ICU_StatusGet(ICU_CHANNEL_0) != ICU_STATUS_EVENT_CAP)
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 1f 02 	call	0x43e	; 0x43e <ICU_StatusGet>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	d9 f7       	brne	.-10     	; 0x496 <Icu_GetDutyCycleValues+0x3c>
			{
				/* Do Nothing */
			}
			u16ValueAtStartFalling = Icu_GetInputCaptureValue();
 4a0:	0e 94 1c 02 	call	0x438	; 0x438 <Icu_GetInputCaptureValue>
 4a4:	ec 01       	movw	r28, r24

			Icu_SetActivationCondition(ICU_CHANNEL_0, ICU_RISING_EDGE);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 0a 02 	call	0x414	; 0x414 <Icu_SetActivationCondition>
			while(ICU_StatusGet(ICU_CHANNEL_0) != ICU_STATUS_EVENT_CAP)
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 1f 02 	call	0x43e	; 0x43e <ICU_StatusGet>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	d9 f7       	brne	.-10     	; 0x4ae <Icu_GetDutyCycleValues+0x54>
			{
				/* Do Nothing */
			}
			u16ValueAtStartSecondRising = Icu_GetInputCaptureValue();
 4b8:	0e 94 1c 02 	call	0x438	; 0x438 <Icu_GetInputCaptureValue>

			/* !Comment: Check for valid condition, to avoid timer overflow reading */
			if((u16ValueAtStartFirstRising < u16ValueAtStartFalling) && (u16ValueAtStartFalling < u16ValueAtStartSecondRising))
 4bc:	ec 16       	cp	r14, r28
 4be:	fd 06       	cpc	r15, r29
 4c0:	60 f4       	brcc	.+24     	; 0x4da <Icu_GetDutyCycleValues+0x80>
 4c2:	c8 17       	cp	r28, r24
 4c4:	d9 07       	cpc	r29, r25
 4c6:	48 f4       	brcc	.+18     	; 0x4da <Icu_GetDutyCycleValues+0x80>
			{
				DutyCycleValues->ActiveTime = u16ValueAtStartFalling - u16ValueAtStartFirstRising;
 4c8:	ce 19       	sub	r28, r14
 4ca:	df 09       	sbc	r29, r15
 4cc:	f8 01       	movw	r30, r16
 4ce:	d1 83       	std	Z+1, r29	; 0x01
 4d0:	c0 83       	st	Z, r28
				DutyCycleValues->PeriodTime = u16ValueAtStartSecondRising - u16ValueAtStartFirstRising;
 4d2:	8e 19       	sub	r24, r14
 4d4:	9f 09       	sbc	r25, r15
 4d6:	93 83       	std	Z+3, r25	; 0x03
 4d8:	82 83       	std	Z+2, r24	; 0x02

		default:
			break;
	}

}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	08 95       	ret

000004e8 <__divsf3>:
 4e8:	0e 94 88 02 	call	0x510	; 0x510 <__divsf3x>
 4ec:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_round>
 4f0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 4f4:	58 f0       	brcs	.+22     	; 0x50c <__divsf3+0x24>
 4f6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 4fa:	40 f0       	brcs	.+16     	; 0x50c <__divsf3+0x24>
 4fc:	29 f4       	brne	.+10     	; 0x508 <__divsf3+0x20>
 4fe:	5f 3f       	cpi	r21, 0xFF	; 255
 500:	29 f0       	breq	.+10     	; 0x50c <__divsf3+0x24>
 502:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 506:	51 11       	cpse	r21, r1
 508:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 50c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>

00000510 <__divsf3x>:
 510:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_split3>
 514:	68 f3       	brcs	.-38     	; 0x4f0 <__divsf3+0x8>

00000516 <__divsf3_pse>:
 516:	99 23       	and	r25, r25
 518:	b1 f3       	breq	.-20     	; 0x506 <__divsf3+0x1e>
 51a:	55 23       	and	r21, r21
 51c:	91 f3       	breq	.-28     	; 0x502 <__divsf3+0x1a>
 51e:	95 1b       	sub	r25, r21
 520:	55 0b       	sbc	r21, r21
 522:	bb 27       	eor	r27, r27
 524:	aa 27       	eor	r26, r26
 526:	62 17       	cp	r22, r18
 528:	73 07       	cpc	r23, r19
 52a:	84 07       	cpc	r24, r20
 52c:	38 f0       	brcs	.+14     	; 0x53c <__divsf3_pse+0x26>
 52e:	9f 5f       	subi	r25, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	44 1f       	adc	r20, r20
 538:	aa 1f       	adc	r26, r26
 53a:	a9 f3       	breq	.-22     	; 0x526 <__divsf3_pse+0x10>
 53c:	35 d0       	rcall	.+106    	; 0x5a8 <__divsf3_pse+0x92>
 53e:	0e 2e       	mov	r0, r30
 540:	3a f0       	brmi	.+14     	; 0x550 <__divsf3_pse+0x3a>
 542:	e0 e8       	ldi	r30, 0x80	; 128
 544:	32 d0       	rcall	.+100    	; 0x5aa <__divsf3_pse+0x94>
 546:	91 50       	subi	r25, 0x01	; 1
 548:	50 40       	sbci	r21, 0x00	; 0
 54a:	e6 95       	lsr	r30
 54c:	00 1c       	adc	r0, r0
 54e:	ca f7       	brpl	.-14     	; 0x542 <__divsf3_pse+0x2c>
 550:	2b d0       	rcall	.+86     	; 0x5a8 <__divsf3_pse+0x92>
 552:	fe 2f       	mov	r31, r30
 554:	29 d0       	rcall	.+82     	; 0x5a8 <__divsf3_pse+0x92>
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	bb 1f       	adc	r27, r27
 55e:	26 17       	cp	r18, r22
 560:	37 07       	cpc	r19, r23
 562:	48 07       	cpc	r20, r24
 564:	ab 07       	cpc	r26, r27
 566:	b0 e8       	ldi	r27, 0x80	; 128
 568:	09 f0       	breq	.+2      	; 0x56c <__divsf3_pse+0x56>
 56a:	bb 0b       	sbc	r27, r27
 56c:	80 2d       	mov	r24, r0
 56e:	bf 01       	movw	r22, r30
 570:	ff 27       	eor	r31, r31
 572:	93 58       	subi	r25, 0x83	; 131
 574:	5f 4f       	sbci	r21, 0xFF	; 255
 576:	3a f0       	brmi	.+14     	; 0x586 <__divsf3_pse+0x70>
 578:	9e 3f       	cpi	r25, 0xFE	; 254
 57a:	51 05       	cpc	r21, r1
 57c:	78 f0       	brcs	.+30     	; 0x59c <__divsf3_pse+0x86>
 57e:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 582:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 586:	5f 3f       	cpi	r21, 0xFF	; 255
 588:	e4 f3       	brlt	.-8      	; 0x582 <__divsf3_pse+0x6c>
 58a:	98 3e       	cpi	r25, 0xE8	; 232
 58c:	d4 f3       	brlt	.-12     	; 0x582 <__divsf3_pse+0x6c>
 58e:	86 95       	lsr	r24
 590:	77 95       	ror	r23
 592:	67 95       	ror	r22
 594:	b7 95       	ror	r27
 596:	f7 95       	ror	r31
 598:	9f 5f       	subi	r25, 0xFF	; 255
 59a:	c9 f7       	brne	.-14     	; 0x58e <__divsf3_pse+0x78>
 59c:	88 0f       	add	r24, r24
 59e:	91 1d       	adc	r25, r1
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret
 5a8:	e1 e0       	ldi	r30, 0x01	; 1
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	bb 1f       	adc	r27, r27
 5b2:	62 17       	cp	r22, r18
 5b4:	73 07       	cpc	r23, r19
 5b6:	84 07       	cpc	r24, r20
 5b8:	ba 07       	cpc	r27, r26
 5ba:	20 f0       	brcs	.+8      	; 0x5c4 <__divsf3_pse+0xae>
 5bc:	62 1b       	sub	r22, r18
 5be:	73 0b       	sbc	r23, r19
 5c0:	84 0b       	sbc	r24, r20
 5c2:	ba 0b       	sbc	r27, r26
 5c4:	ee 1f       	adc	r30, r30
 5c6:	88 f7       	brcc	.-30     	; 0x5aa <__divsf3_pse+0x94>
 5c8:	e0 95       	com	r30
 5ca:	08 95       	ret

000005cc <__fixunssfsi>:
 5cc:	0e 94 82 03 	call	0x704	; 0x704 <__fp_splitA>
 5d0:	88 f0       	brcs	.+34     	; 0x5f4 <__fixunssfsi+0x28>
 5d2:	9f 57       	subi	r25, 0x7F	; 127
 5d4:	98 f0       	brcs	.+38     	; 0x5fc <__fixunssfsi+0x30>
 5d6:	b9 2f       	mov	r27, r25
 5d8:	99 27       	eor	r25, r25
 5da:	b7 51       	subi	r27, 0x17	; 23
 5dc:	b0 f0       	brcs	.+44     	; 0x60a <__fixunssfsi+0x3e>
 5de:	e1 f0       	breq	.+56     	; 0x618 <__fixunssfsi+0x4c>
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	88 1f       	adc	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	1a f0       	brmi	.+6      	; 0x5f0 <__fixunssfsi+0x24>
 5ea:	ba 95       	dec	r27
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <__fixunssfsi+0x14>
 5ee:	14 c0       	rjmp	.+40     	; 0x618 <__fixunssfsi+0x4c>
 5f0:	b1 30       	cpi	r27, 0x01	; 1
 5f2:	91 f0       	breq	.+36     	; 0x618 <__fixunssfsi+0x4c>
 5f4:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_zero>
 5f8:	b1 e0       	ldi	r27, 0x01	; 1
 5fa:	08 95       	ret
 5fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_zero>
 600:	67 2f       	mov	r22, r23
 602:	78 2f       	mov	r23, r24
 604:	88 27       	eor	r24, r24
 606:	b8 5f       	subi	r27, 0xF8	; 248
 608:	39 f0       	breq	.+14     	; 0x618 <__fixunssfsi+0x4c>
 60a:	b9 3f       	cpi	r27, 0xF9	; 249
 60c:	cc f3       	brlt	.-14     	; 0x600 <__fixunssfsi+0x34>
 60e:	86 95       	lsr	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b3 95       	inc	r27
 616:	d9 f7       	brne	.-10     	; 0x60e <__fixunssfsi+0x42>
 618:	3e f4       	brtc	.+14     	; 0x628 <__fixunssfsi+0x5c>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	08 95       	ret

0000062a <__floatunsisf>:
 62a:	e8 94       	clt
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__floatsisf+0x12>

0000062e <__floatsisf>:
 62e:	97 fb       	bst	r25, 7
 630:	3e f4       	brtc	.+14     	; 0x640 <__floatsisf+0x12>
 632:	90 95       	com	r25
 634:	80 95       	com	r24
 636:	70 95       	com	r23
 638:	61 95       	neg	r22
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	99 23       	and	r25, r25
 642:	a9 f0       	breq	.+42     	; 0x66e <__floatsisf+0x40>
 644:	f9 2f       	mov	r31, r25
 646:	96 e9       	ldi	r25, 0x96	; 150
 648:	bb 27       	eor	r27, r27
 64a:	93 95       	inc	r25
 64c:	f6 95       	lsr	r31
 64e:	87 95       	ror	r24
 650:	77 95       	ror	r23
 652:	67 95       	ror	r22
 654:	b7 95       	ror	r27
 656:	f1 11       	cpse	r31, r1
 658:	f8 cf       	rjmp	.-16     	; 0x64a <__floatsisf+0x1c>
 65a:	fa f4       	brpl	.+62     	; 0x69a <__floatsisf+0x6c>
 65c:	bb 0f       	add	r27, r27
 65e:	11 f4       	brne	.+4      	; 0x664 <__floatsisf+0x36>
 660:	60 ff       	sbrs	r22, 0
 662:	1b c0       	rjmp	.+54     	; 0x69a <__floatsisf+0x6c>
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	16 c0       	rjmp	.+44     	; 0x69a <__floatsisf+0x6c>
 66e:	88 23       	and	r24, r24
 670:	11 f0       	breq	.+4      	; 0x676 <__floatsisf+0x48>
 672:	96 e9       	ldi	r25, 0x96	; 150
 674:	11 c0       	rjmp	.+34     	; 0x698 <__floatsisf+0x6a>
 676:	77 23       	and	r23, r23
 678:	21 f0       	breq	.+8      	; 0x682 <__floatsisf+0x54>
 67a:	9e e8       	ldi	r25, 0x8E	; 142
 67c:	87 2f       	mov	r24, r23
 67e:	76 2f       	mov	r23, r22
 680:	05 c0       	rjmp	.+10     	; 0x68c <__floatsisf+0x5e>
 682:	66 23       	and	r22, r22
 684:	71 f0       	breq	.+28     	; 0x6a2 <__floatsisf+0x74>
 686:	96 e8       	ldi	r25, 0x86	; 134
 688:	86 2f       	mov	r24, r22
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	2a f0       	brmi	.+10     	; 0x69a <__floatsisf+0x6c>
 690:	9a 95       	dec	r25
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	da f7       	brpl	.-10     	; 0x690 <__floatsisf+0x62>
 69a:	88 0f       	add	r24, r24
 69c:	96 95       	lsr	r25
 69e:	87 95       	ror	r24
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <__fp_inf>:
 6a4:	97 f9       	bld	r25, 7
 6a6:	9f 67       	ori	r25, 0x7F	; 127
 6a8:	80 e8       	ldi	r24, 0x80	; 128
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <__fp_nan>:
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	80 ec       	ldi	r24, 0xC0	; 192
 6b4:	08 95       	ret

000006b6 <__fp_pscA>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	16 16       	cp	r1, r22
 6bc:	17 06       	cpc	r1, r23
 6be:	18 06       	cpc	r1, r24
 6c0:	09 06       	cpc	r0, r25
 6c2:	08 95       	ret

000006c4 <__fp_pscB>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	12 16       	cp	r1, r18
 6ca:	13 06       	cpc	r1, r19
 6cc:	14 06       	cpc	r1, r20
 6ce:	05 06       	cpc	r0, r21
 6d0:	08 95       	ret

000006d2 <__fp_round>:
 6d2:	09 2e       	mov	r0, r25
 6d4:	03 94       	inc	r0
 6d6:	00 0c       	add	r0, r0
 6d8:	11 f4       	brne	.+4      	; 0x6de <__fp_round+0xc>
 6da:	88 23       	and	r24, r24
 6dc:	52 f0       	brmi	.+20     	; 0x6f2 <__fp_round+0x20>
 6de:	bb 0f       	add	r27, r27
 6e0:	40 f4       	brcc	.+16     	; 0x6f2 <__fp_round+0x20>
 6e2:	bf 2b       	or	r27, r31
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0x18>
 6e6:	60 ff       	sbrs	r22, 0
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fp_round+0x20>
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__fp_split3>:
 6f4:	57 fd       	sbrc	r21, 7
 6f6:	90 58       	subi	r25, 0x80	; 128
 6f8:	44 0f       	add	r20, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	59 f0       	breq	.+22     	; 0x714 <__fp_splitA+0x10>
 6fe:	5f 3f       	cpi	r21, 0xFF	; 255
 700:	71 f0       	breq	.+28     	; 0x71e <__fp_splitA+0x1a>
 702:	47 95       	ror	r20

00000704 <__fp_splitA>:
 704:	88 0f       	add	r24, r24
 706:	97 fb       	bst	r25, 7
 708:	99 1f       	adc	r25, r25
 70a:	61 f0       	breq	.+24     	; 0x724 <__fp_splitA+0x20>
 70c:	9f 3f       	cpi	r25, 0xFF	; 255
 70e:	79 f0       	breq	.+30     	; 0x72e <__fp_splitA+0x2a>
 710:	87 95       	ror	r24
 712:	08 95       	ret
 714:	12 16       	cp	r1, r18
 716:	13 06       	cpc	r1, r19
 718:	14 06       	cpc	r1, r20
 71a:	55 1f       	adc	r21, r21
 71c:	f2 cf       	rjmp	.-28     	; 0x702 <__fp_split3+0xe>
 71e:	46 95       	lsr	r20
 720:	f1 df       	rcall	.-30     	; 0x704 <__fp_splitA>
 722:	08 c0       	rjmp	.+16     	; 0x734 <__fp_splitA+0x30>
 724:	16 16       	cp	r1, r22
 726:	17 06       	cpc	r1, r23
 728:	18 06       	cpc	r1, r24
 72a:	99 1f       	adc	r25, r25
 72c:	f1 cf       	rjmp	.-30     	; 0x710 <__fp_splitA+0xc>
 72e:	86 95       	lsr	r24
 730:	71 05       	cpc	r23, r1
 732:	61 05       	cpc	r22, r1
 734:	08 94       	sec
 736:	08 95       	ret

00000738 <__fp_zero>:
 738:	e8 94       	clt

0000073a <__fp_szero>:
 73a:	bb 27       	eor	r27, r27
 73c:	66 27       	eor	r22, r22
 73e:	77 27       	eor	r23, r23
 740:	cb 01       	movw	r24, r22
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__mulsf3>:
 746:	0e 94 b6 03 	call	0x76c	; 0x76c <__mulsf3x>
 74a:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_round>
 74e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 752:	38 f0       	brcs	.+14     	; 0x762 <__mulsf3+0x1c>
 754:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 758:	20 f0       	brcs	.+8      	; 0x762 <__mulsf3+0x1c>
 75a:	95 23       	and	r25, r21
 75c:	11 f0       	breq	.+4      	; 0x762 <__mulsf3+0x1c>
 75e:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 762:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>
 766:	11 24       	eor	r1, r1
 768:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>

0000076c <__mulsf3x>:
 76c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_split3>
 770:	70 f3       	brcs	.-36     	; 0x74e <__mulsf3+0x8>

00000772 <__mulsf3_pse>:
 772:	95 9f       	mul	r25, r21
 774:	c1 f3       	breq	.-16     	; 0x766 <__mulsf3+0x20>
 776:	95 0f       	add	r25, r21
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	55 1f       	adc	r21, r21
 77c:	62 9f       	mul	r22, r18
 77e:	f0 01       	movw	r30, r0
 780:	72 9f       	mul	r23, r18
 782:	bb 27       	eor	r27, r27
 784:	f0 0d       	add	r31, r0
 786:	b1 1d       	adc	r27, r1
 788:	63 9f       	mul	r22, r19
 78a:	aa 27       	eor	r26, r26
 78c:	f0 0d       	add	r31, r0
 78e:	b1 1d       	adc	r27, r1
 790:	aa 1f       	adc	r26, r26
 792:	64 9f       	mul	r22, r20
 794:	66 27       	eor	r22, r22
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	66 1f       	adc	r22, r22
 79c:	82 9f       	mul	r24, r18
 79e:	22 27       	eor	r18, r18
 7a0:	b0 0d       	add	r27, r0
 7a2:	a1 1d       	adc	r26, r1
 7a4:	62 1f       	adc	r22, r18
 7a6:	73 9f       	mul	r23, r19
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	62 1f       	adc	r22, r18
 7ae:	83 9f       	mul	r24, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	22 1f       	adc	r18, r18
 7b6:	74 9f       	mul	r23, r20
 7b8:	33 27       	eor	r19, r19
 7ba:	a0 0d       	add	r26, r0
 7bc:	61 1d       	adc	r22, r1
 7be:	23 1f       	adc	r18, r19
 7c0:	84 9f       	mul	r24, r20
 7c2:	60 0d       	add	r22, r0
 7c4:	21 1d       	adc	r18, r1
 7c6:	82 2f       	mov	r24, r18
 7c8:	76 2f       	mov	r23, r22
 7ca:	6a 2f       	mov	r22, r26
 7cc:	11 24       	eor	r1, r1
 7ce:	9f 57       	subi	r25, 0x7F	; 127
 7d0:	50 40       	sbci	r21, 0x00	; 0
 7d2:	9a f0       	brmi	.+38     	; 0x7fa <__mulsf3_pse+0x88>
 7d4:	f1 f0       	breq	.+60     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7d6:	88 23       	and	r24, r24
 7d8:	4a f0       	brmi	.+18     	; 0x7ec <__mulsf3_pse+0x7a>
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	bb 1f       	adc	r27, r27
 7e0:	66 1f       	adc	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	91 50       	subi	r25, 0x01	; 1
 7e8:	50 40       	sbci	r21, 0x00	; 0
 7ea:	a9 f7       	brne	.-22     	; 0x7d6 <__mulsf3_pse+0x64>
 7ec:	9e 3f       	cpi	r25, 0xFE	; 254
 7ee:	51 05       	cpc	r21, r1
 7f0:	80 f0       	brcs	.+32     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f2:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 7f6:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 7fa:	5f 3f       	cpi	r21, 0xFF	; 255
 7fc:	e4 f3       	brlt	.-8      	; 0x7f6 <__mulsf3_pse+0x84>
 7fe:	98 3e       	cpi	r25, 0xE8	; 232
 800:	d4 f3       	brlt	.-12     	; 0x7f6 <__mulsf3_pse+0x84>
 802:	86 95       	lsr	r24
 804:	77 95       	ror	r23
 806:	67 95       	ror	r22
 808:	b7 95       	ror	r27
 80a:	f7 95       	ror	r31
 80c:	e7 95       	ror	r30
 80e:	9f 5f       	subi	r25, 0xFF	; 255
 810:	c1 f7       	brne	.-16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 812:	fe 2b       	or	r31, r30
 814:	88 0f       	add	r24, r24
 816:	91 1d       	adc	r25, r1
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__itoa_ncheck>:
 820:	bb 27       	eor	r27, r27
 822:	4a 30       	cpi	r20, 0x0A	; 10
 824:	31 f4       	brne	.+12     	; 0x832 <__itoa_ncheck+0x12>
 826:	99 23       	and	r25, r25
 828:	22 f4       	brpl	.+8      	; 0x832 <__itoa_ncheck+0x12>
 82a:	bd e2       	ldi	r27, 0x2D	; 45
 82c:	90 95       	com	r25
 82e:	81 95       	neg	r24
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	0c 94 1c 04 	jmp	0x838	; 0x838 <__utoa_common>

00000836 <__utoa_ncheck>:
 836:	bb 27       	eor	r27, r27

00000838 <__utoa_common>:
 838:	fb 01       	movw	r30, r22
 83a:	55 27       	eor	r21, r21
 83c:	aa 27       	eor	r26, r26
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	aa 1f       	adc	r26, r26
 844:	a4 17       	cp	r26, r20
 846:	10 f0       	brcs	.+4      	; 0x84c <__utoa_common+0x14>
 848:	a4 1b       	sub	r26, r20
 84a:	83 95       	inc	r24
 84c:	50 51       	subi	r21, 0x10	; 16
 84e:	b9 f7       	brne	.-18     	; 0x83e <__utoa_common+0x6>
 850:	a0 5d       	subi	r26, 0xD0	; 208
 852:	aa 33       	cpi	r26, 0x3A	; 58
 854:	08 f0       	brcs	.+2      	; 0x858 <__utoa_common+0x20>
 856:	a9 5d       	subi	r26, 0xD9	; 217
 858:	a1 93       	st	Z+, r26
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	79 f7       	brne	.-34     	; 0x83c <__utoa_common+0x4>
 85e:	b1 11       	cpse	r27, r1
 860:	b1 93       	st	Z+, r27
 862:	11 92       	st	Z+, r1
 864:	cb 01       	movw	r24, r22
 866:	0c 94 35 04 	jmp	0x86a	; 0x86a <strrev>

0000086a <strrev>:
 86a:	dc 01       	movw	r26, r24
 86c:	fc 01       	movw	r30, r24
 86e:	67 2f       	mov	r22, r23
 870:	71 91       	ld	r23, Z+
 872:	77 23       	and	r23, r23
 874:	e1 f7       	brne	.-8      	; 0x86e <strrev+0x4>
 876:	32 97       	sbiw	r30, 0x02	; 2
 878:	04 c0       	rjmp	.+8      	; 0x882 <strrev+0x18>
 87a:	7c 91       	ld	r23, X
 87c:	6d 93       	st	X+, r22
 87e:	70 83       	st	Z, r23
 880:	62 91       	ld	r22, -Z
 882:	ae 17       	cp	r26, r30
 884:	bf 07       	cpc	r27, r31
 886:	c8 f3       	brcs	.-14     	; 0x87a <strrev+0x10>
 888:	08 95       	ret

0000088a <_exit>:
 88a:	f8 94       	cli

0000088c <__stop_program>:
 88c:	ff cf       	rjmp	.-2      	; 0x88c <__stop_program>
