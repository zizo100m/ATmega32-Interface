
Wdt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec1  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b2  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056b  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000684  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027b  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Led_Init>:
#include "Led.h"
#include "Dio.h"

void Led_Init(volatile uint8 *Led_reg, LedEnum_t Led_no)
{
	Dio_ChannelDirectionSet(Led_reg, Led_no, DIO_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 76 00 	call	0xec	; 0xec <Dio_ChannelDirectionSet>
  98:	08 95       	ret

0000009a <Led_StateSet>:
}
void Led_StateSet(volatile uint8 *Led_reg, LedEnum_t Led_no, LedStateEnum_t state)
{
	if (state == LED_TOGGLE)
  9a:	42 30       	cpi	r20, 0x02	; 2
  9c:	19 f4       	brne	.+6      	; 0xa4 <Led_StateSet+0xa>
	{
		Dio_ChannelToggle(Led_reg, Led_no);
  9e:	0e 94 b2 00 	call	0x164	; 0x164 <Dio_ChannelToggle>
  a2:	08 95       	ret
	}
	else
	{
		Dio_ChannelWrite(Led_reg, Led_no, state);
  a4:	0e 94 94 00 	call	0x128	; 0x128 <Dio_ChannelWrite>
  a8:	08 95       	ret

000000aa <main>:
#include "Led.h"
#include <util/delay.h>

int main(void)
{
	Led_Init(LED0_1_DIR_REG, LED0);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 49 00 	call	0x92	; 0x92 <Led_Init>
	Wdg_Init(&gStrWdg_Configuration);
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 c8 00 	call	0x190	; 0x190 <Wdg_Init>
	
	Led_StateSet(LED0_1_OUT_REG, LED0, LED_ON);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	85 e3       	ldi	r24, 0x35	; 53
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 00 	call	0x9a	; 0x9a <Led_StateSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f e3       	ldi	r18, 0x3F	; 63
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x24>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x2e>
  d8:	00 00       	nop
	_delay_ms(1000);
	Led_StateSet(LED0_1_OUT_REG, LED0, LED_OFF);
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	85 e3       	ldi	r24, 0x35	; 53
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 4d 00 	call	0x9a	; 0x9a <Led_StateSet>
    while (1) 
    {
		Wdg_Trigger();
  e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Wdg_Trigger>
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x3c>

000000ec <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
  ec:	44 23       	and	r20, r20
  ee:	19 f0       	breq	.+6      	; 0xf6 <Dio_ChannelDirectionSet+0xa>
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	71 f0       	breq	.+28     	; 0x110 <Dio_ChannelDirectionSet+0x24>
  f4:	08 95       	ret
  f6:	fc 01       	movw	r30, r24
  f8:	40 81       	ld	r20, Z
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Dio_ChannelDirectionSet+0x18>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <Dio_ChannelDirectionSet+0x14>
 108:	20 95       	com	r18
 10a:	24 23       	and	r18, r20
 10c:	20 83       	st	Z, r18
 10e:	08 95       	ret
 110:	fc 01       	movw	r30, r24
 112:	40 81       	ld	r20, Z
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <Dio_ChannelDirectionSet+0x32>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <Dio_ChannelDirectionSet+0x2e>
 122:	24 2b       	or	r18, r20
 124:	20 83       	st	Z, r18
 126:	08 95       	ret

00000128 <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
 128:	44 23       	and	r20, r20
 12a:	19 f0       	breq	.+6      	; 0x132 <Dio_ChannelWrite+0xa>
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	71 f0       	breq	.+28     	; 0x14c <Dio_ChannelWrite+0x24>
 130:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
 132:	fc 01       	movw	r30, r24
 134:	40 81       	ld	r20, Z
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_ChannelWrite+0x18>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_ChannelWrite+0x14>
 144:	20 95       	com	r18
 146:	24 23       	and	r18, r20
 148:	20 83       	st	Z, r18
		break;
 14a:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
 14c:	fc 01       	movw	r30, r24
 14e:	40 81       	ld	r20, Z
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <Dio_ChannelWrite+0x32>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Dio_ChannelWrite+0x2e>
 15e:	24 2b       	or	r18, r20
 160:	20 83       	st	Z, r18
 162:	08 95       	ret

00000164 <Dio_ChannelToggle>:
		break;
	}	
}
void Dio_ChannelToggle(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	TOGGLE_BIT(*Port_reg,Channel);
 164:	fc 01       	movw	r30, r24
 166:	40 81       	ld	r20, Z
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Dio_ChannelToggle+0xe>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <Dio_ChannelToggle+0xa>
 176:	24 27       	eor	r18, r20
 178:	20 83       	st	Z, r18
 17a:	08 95       	ret

0000017c <Wdg_Disable>:
	{
		case WDG_ENABLE:
		SET_BIT(*WDG_CTRL_REG, WDG_ENABLE_BIT);
		break;
		case WDG_DISABLE:
		Wdg_Disable();
 17c:	81 b5       	in	r24, 0x21	; 33
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	81 bd       	out	0x21, r24	; 33
 182:	81 b5       	in	r24, 0x21	; 33
 184:	80 61       	ori	r24, 0x10	; 16
 186:	81 bd       	out	0x21, r24	; 33
 188:	81 b5       	in	r24, 0x21	; 33
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	81 bd       	out	0x21, r24	; 33
 18e:	08 95       	ret

00000190 <Wdg_Init>:
 190:	fc 01       	movw	r30, r24
 192:	11 bc       	out	0x21, r1	; 33
 194:	81 b5       	in	r24, 0x21	; 33
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	98 2b       	or	r25, r24
 19a:	91 bd       	out	0x21, r25	; 33
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	31 f0       	breq	.+12     	; 0x1ae <Wdg_Init+0x1e>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	31 f4       	brne	.+12     	; 0x1b2 <Wdg_Init+0x22>
 1a6:	81 b5       	in	r24, 0x21	; 33
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	81 bd       	out	0x21, r24	; 33
 1ac:	08 95       	ret
 1ae:	0e 94 be 00 	call	0x17c	; 0x17c <Wdg_Disable>
 1b2:	08 95       	ret

000001b4 <Wdg_Trigger>:
		break;
	}	
}
void Wdg_Trigger(void)
{
	__asm__ __volatile__ ("wdr");
 1b4:	a8 95       	wdr
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
