
StepperMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef2  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e0  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002de  00000000  00000000  00002867  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_ChannelDirectionSet>:
#include "ATmega32_Cfg.h"

void Dio_ChannelDirectionSet(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinDirectionEnum_t Direction)
{

	switch(Direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <Dio_ChannelDirectionSet+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	71 f0       	breq	.+28     	; 0xb6 <Dio_ChannelDirectionSet+0x24>
  9a:	08 95       	ret
	{
		case DIO_INPUT:
		CLEAR_BIT(*Port_reg,Channel);
  9c:	fc 01       	movw	r30, r24
  9e:	40 81       	ld	r20, Z
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <Dio_ChannelDirectionSet+0x18>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <Dio_ChannelDirectionSet+0x14>
  ae:	20 95       	com	r18
  b0:	24 23       	and	r18, r20
  b2:	20 83       	st	Z, r18
		break;
  b4:	08 95       	ret
		case DIO_OUTPUT:
		SET_BIT(*Port_reg,Channel);
  b6:	fc 01       	movw	r30, r24
  b8:	40 81       	ld	r20, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Dio_ChannelDirectionSet+0x32>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <Dio_ChannelDirectionSet+0x2e>
  c8:	24 2b       	or	r18, r20
  ca:	20 83       	st	Z, r18
  cc:	08 95       	ret

000000ce <Dio_ChannelRead>:
	}
}

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
  ce:	fc 01       	movw	r30, r24
  d0:	40 81       	ld	r20, Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	9c 01       	movw	r18, r24
  d8:	06 2e       	mov	r0, r22
  da:	02 c0       	rjmp	.+4      	; 0xe0 <Dio_ChannelRead+0x12>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <Dio_ChannelRead+0xe>
  e4:	84 2f       	mov	r24, r20
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 23       	and	r24, r18
  ea:	93 23       	and	r25, r19
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Dio_ChannelRead+0x24>
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <Dio_ChannelRead+0x20>
	return (u8LocalPinValue);
}
  f6:	08 95       	ret

000000f8 <main>:
#include "StepperMotor.h"
#include "Sw.h"

int main(void)
{
	StepperMotor_Init();
  f8:	0e 94 9d 00 	call	0x13a	; 0x13a <StepperMotor_Init>
	Sw_init(SW1_2_DIR_REG, SW1);
  fc:	66 e0       	ldi	r22, 0x06	; 6
  fe:	81 e3       	ldi	r24, 0x31	; 49
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Sw_init>
	Sw_init(SW1_2_DIR_REG, SW2);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	81 e3       	ldi	r24, 0x31	; 49
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Sw_init>
 110:	02 c0       	rjmp	.+4      	; 0x116 <main+0x1e>
	while (1)
	{
		while(Sw_StateGet(SW1_2_INP_REG, SW1) == SW_PRESSED)
		{
			StepperMotor_TurnCW();
 112:	0e 94 b6 00 	call	0x16c	; 0x16c <StepperMotor_TurnCW>
	StepperMotor_Init();
	Sw_init(SW1_2_DIR_REG, SW1);
	Sw_init(SW1_2_DIR_REG, SW2);
	while (1)
	{
		while(Sw_StateGet(SW1_2_INP_REG, SW1) == SW_PRESSED)
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Sw_StateGet>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	19 f4       	brne	.+6      	; 0x12a <main+0x32>
 124:	f6 cf       	rjmp	.-20     	; 0x112 <main+0x1a>
		{
			StepperMotor_TurnCW();
		}
		while(Sw_StateGet(SW1_2_INP_REG, SW2) == SW_PRESSED)
		{
			StepperMotor_TurnCCW();
 126:	0e 94 cd 00 	call	0x19a	; 0x19a <StepperMotor_TurnCCW>
	{
		while(Sw_StateGet(SW1_2_INP_REG, SW1) == SW_PRESSED)
		{
			StepperMotor_TurnCW();
		}
		while(Sw_StateGet(SW1_2_INP_REG, SW2) == SW_PRESSED)
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Sw_StateGet>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	b9 f3       	breq	.-18     	; 0x126 <main+0x2e>
 138:	ee cf       	rjmp	.-36     	; 0x116 <main+0x1e>

0000013a <StepperMotor_Init>:
uint8 gau8StepperRotation[STEPPER_MOTOR_COILS_NUM] = {0x01U, 0x02U, 0x04U, 0x08U};
#endif		

void StepperMotor_Init(void)
{
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN1_PIN, DIO_OUTPUT);
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	64 e0       	ldi	r22, 0x04	; 4
 13e:	8a e3       	ldi	r24, 0x3A	; 58
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN2_PIN, DIO_OUTPUT);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	65 e0       	ldi	r22, 0x05	; 5
 14a:	8a e3       	ldi	r24, 0x3A	; 58
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN3_PIN, DIO_OUTPUT);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	66 e0       	ldi	r22, 0x06	; 6
 156:	8a e3       	ldi	r24, 0x3A	; 58
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN4_PIN, DIO_OUTPUT);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	67 e0       	ldi	r22, 0x07	; 7
 162:	8a e3       	ldi	r24, 0x3A	; 58
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
 16a:	08 95       	ret

0000016c <StepperMotor_TurnCW>:
}
void StepperMotor_TurnCW(void)
{
	uint8 u8LocalLoopIndex;
	for (u8LocalLoopIndex = 0U; u8LocalLoopIndex < STEPPER_MOTOR_COILS_NUM; u8LocalLoopIndex++)
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	12 c0       	rjmp	.+36     	; 0x194 <StepperMotor_TurnCW+0x28>
	{
#if STEPPER_UPPER_PORT
		*STEPPER_MOTOR_OUT_REG &= 0x0FU;
 170:	9b b3       	in	r25, 0x1b	; 27
 172:	9f 70       	andi	r25, 0x0F	; 15
 174:	9b bb       	out	0x1b, r25	; 27
#else
		*STEPPER_MOTOR_OUT_REG &= 0xF0U;
#endif
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[u8LocalLoopIndex]; 
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	e8 2f       	mov	r30, r24
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	e0 5a       	subi	r30, 0xA0	; 160
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	90 81       	ld	r25, Z
 182:	92 2b       	or	r25, r18
 184:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	ef e1       	ldi	r30, 0x1F	; 31
 188:	fe e4       	ldi	r31, 0x4E	; 78
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <StepperMotor_TurnCW+0x1e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <StepperMotor_TurnCW+0x24>
 190:	00 00       	nop
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN4_PIN, DIO_OUTPUT);
}
void StepperMotor_TurnCW(void)
{
	uint8 u8LocalLoopIndex;
	for (u8LocalLoopIndex = 0U; u8LocalLoopIndex < STEPPER_MOTOR_COILS_NUM; u8LocalLoopIndex++)
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	84 30       	cpi	r24, 0x04	; 4
 196:	60 f3       	brcs	.-40     	; 0x170 <StepperMotor_TurnCW+0x4>
		*STEPPER_MOTOR_OUT_REG &= 0xF0U;
#endif
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[u8LocalLoopIndex]; 
		_delay_ms(STEPPER_MOTOR_STEP_DELAY_MS);
	}
}
 198:	08 95       	ret

0000019a <StepperMotor_TurnCCW>:
void StepperMotor_TurnCCW(void)
{
	sint8 s8LocalLoopIndex;
	for (s8LocalLoopIndex = (STEPPER_MOTOR_COILS_NUM -1U) ;s8LocalLoopIndex >=0 ; s8LocalLoopIndex--)
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	14 c0       	rjmp	.+40     	; 0x1c6 <StepperMotor_TurnCCW+0x2c>
	{
#if STEPPER_UPPER_PORT
		*STEPPER_MOTOR_OUT_REG &= 0x0FU;
 19e:	9b b3       	in	r25, 0x1b	; 27
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	9b bb       	out	0x1b, r25	; 27
#else
		*STEPPER_MOTOR_OUT_REG &= 0xF0U;
#endif
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[s8LocalLoopIndex];
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	e8 2f       	mov	r30, r24
 1a8:	08 2e       	mov	r0, r24
 1aa:	00 0c       	add	r0, r0
 1ac:	ff 0b       	sbc	r31, r31
 1ae:	e0 5a       	subi	r30, 0xA0	; 160
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	90 81       	ld	r25, Z
 1b4:	92 2b       	or	r25, r18
 1b6:	9b bb       	out	0x1b, r25	; 27
 1b8:	ef e1       	ldi	r30, 0x1F	; 31
 1ba:	fe e4       	ldi	r31, 0x4E	; 78
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <StepperMotor_TurnCCW+0x22>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <StepperMotor_TurnCCW+0x28>
 1c2:	00 00       	nop
	}
}
void StepperMotor_TurnCCW(void)
{
	sint8 s8LocalLoopIndex;
	for (s8LocalLoopIndex = (STEPPER_MOTOR_COILS_NUM -1U) ;s8LocalLoopIndex >=0 ; s8LocalLoopIndex--)
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	88 23       	and	r24, r24
 1c8:	54 f7       	brge	.-44     	; 0x19e <StepperMotor_TurnCCW+0x4>
		*STEPPER_MOTOR_OUT_REG &= 0xF0U;
#endif
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[s8LocalLoopIndex];
		_delay_ms(STEPPER_MOTOR_STEP_DELAY_MS);
	}
 1ca:	08 95       	ret

000001cc <Sw_init>:
#define DEBOUNCE_PERIOD (20U)

DioPinStateEnum_t Sw_PrevState = SW_RELEASED;
void Sw_init(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Dio_ChannelDirectionSet   (Sw_Reg, Sw_no, DIO_INPUT);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
 1d2:	08 95       	ret

000001d4 <Sw_StateGet>:
}
Sw_StateEnum_t Sw_StateGet(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
 1dc:	16 2f       	mov	r17, r22
	Sw_StateEnum_t LocalSwState = SW_RELEASED;
	
	if(Sw_PrevState != Dio_ChannelRead(Sw_Reg, Sw_no))
 1de:	0e 94 67 00 	call	0xce	; 0xce <Dio_ChannelRead>
 1e2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
 1e6:	89 17       	cp	r24, r25
 1e8:	91 f0       	breq	.+36     	; 0x20e <Sw_StateGet+0x3a>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 ef       	ldi	r24, 0xF9	; 249
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <Sw_StateGet+0x1c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Sw_StateGet+0x26>
 1fa:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_PERIOD);

		Sw_PrevState = Dio_ChannelRead(Sw_Reg, Sw_no);
 1fc:	61 2f       	mov	r22, r17
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 67 00 	call	0xce	; 0xce <Dio_ChannelRead>
 204:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		if (Sw_PrevState == DIO_HIGH)
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	19 f4       	brne	.+6      	; 0x212 <Sw_StateGet+0x3e>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <Sw_StateGet+0x40>
{
	Dio_ChannelDirectionSet   (Sw_Reg, Sw_no, DIO_INPUT);
}
Sw_StateEnum_t Sw_StateGet(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Sw_StateEnum_t LocalSwState = SW_RELEASED;
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	01 c0       	rjmp	.+2      	; 0x214 <Sw_StateGet+0x40>
		{
			LocalSwState = SW_PRESSED;
		}
		else
		{
			LocalSwState = SW_RELEASED;
 212:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return LocalSwState;
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
