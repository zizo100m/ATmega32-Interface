
StepperMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000022e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  000002ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3f  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  00001337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cc  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000021f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000322  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  8a:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_ChannelDirectionSet>:
		break;
	}	
}
void Dio_ChannelToggle(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	TOGGLE_BIT(*Port_reg,Channel);
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <Dio_ChannelDirectionSet+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	71 f0       	breq	.+28     	; 0xb6 <Dio_ChannelDirectionSet+0x24>
  9a:	08 95       	ret
  9c:	fc 01       	movw	r30, r24
  9e:	40 81       	ld	r20, Z
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <Dio_ChannelDirectionSet+0x18>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <Dio_ChannelDirectionSet+0x14>
  ae:	20 95       	com	r18
  b0:	24 23       	and	r18, r20
  b2:	20 83       	st	Z, r18
  b4:	08 95       	ret
  b6:	fc 01       	movw	r30, r24
  b8:	40 81       	ld	r20, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Dio_ChannelDirectionSet+0x32>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <Dio_ChannelDirectionSet+0x2e>
  c8:	24 2b       	or	r18, r20
  ca:	20 83       	st	Z, r18
  cc:	08 95       	ret

000000ce <Dio_ChannelRead>:
  ce:	fc 01       	movw	r30, r24
  d0:	40 81       	ld	r20, Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	9c 01       	movw	r18, r24
  d8:	06 2e       	mov	r0, r22
  da:	02 c0       	rjmp	.+4      	; 0xe0 <Dio_ChannelRead+0x12>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <Dio_ChannelRead+0xe>
  e4:	84 2f       	mov	r24, r20
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 23       	and	r24, r18
  ea:	93 23       	and	r25, r19
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Dio_ChannelRead+0x24>
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <Dio_ChannelRead+0x20>
  f6:	08 95       	ret

000000f8 <Dio_PortWrite>:
}

void Dio_PortWrite(volatile uint8 * Port_reg, uint8 Value)
{
	*Port_reg = Value;
  f8:	fc 01       	movw	r30, r24
  fa:	60 83       	st	Z, r22
  fc:	08 95       	ret

000000fe <main>:
#include "Sw.h"
#include <util/delay.h>

int main(void)
{
    StepperMotor_Init();
  fe:	0e 94 a0 00 	call	0x140	; 0x140 <StepperMotor_Init>
	Sw_init(SW1_2_DIR_REG, SW1);
 102:	66 e0       	ldi	r22, 0x06	; 6
 104:	81 e3       	ldi	r24, 0x31	; 49
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 ed 00 	call	0x1da	; 0x1da <Sw_init>
	Sw_init(SW1_2_DIR_REG, SW2);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	81 e3       	ldi	r24, 0x31	; 49
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 ed 00 	call	0x1da	; 0x1da <Sw_init>
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x1e>
    while (1) 
    {
		while(Sw_StateGet(SW1_2_INP_REG, SW1) == SW_PRESSED)
		{
			StepperMotor_TurnCW();
 118:	0e 94 b9 00 	call	0x172	; 0x172 <StepperMotor_TurnCW>
    StepperMotor_Init();
	Sw_init(SW1_2_DIR_REG, SW1);
	Sw_init(SW1_2_DIR_REG, SW2);
    while (1) 
    {
		while(Sw_StateGet(SW1_2_INP_REG, SW1) == SW_PRESSED)
 11c:	66 e0       	ldi	r22, 0x06	; 6
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Sw_StateGet>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	19 f4       	brne	.+6      	; 0x130 <main+0x32>
 12a:	f6 cf       	rjmp	.-20     	; 0x118 <main+0x1a>
		{
			StepperMotor_TurnCW();
		}
		while(Sw_StateGet(SW1_2_INP_REG, SW2) == SW_PRESSED)
		{
			StepperMotor_TurnCCW();
 12c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <StepperMotor_TurnCCW>
    {
		while(Sw_StateGet(SW1_2_INP_REG, SW1) == SW_PRESSED)
		{
			StepperMotor_TurnCW();
		}
		while(Sw_StateGet(SW1_2_INP_REG, SW2) == SW_PRESSED)
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Sw_StateGet>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	b9 f3       	breq	.-18     	; 0x12c <main+0x2e>
 13e:	ee cf       	rjmp	.-36     	; 0x11c <main+0x1e>

00000140 <StepperMotor_Init>:
uint8 gau8StepperRotation_CCW[4U] = {0x80U, 0x40U, 0x20U, 0x10U};	

void StepperMotor_Init(void)
{
	/* !Comment: Initialize the 4 pins of the Stepper Motor to be OUTPUT */
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN1_PIN, DIO_OUTPUT);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	8a e3       	ldi	r24, 0x3A	; 58
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN2_PIN, DIO_OUTPUT);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	65 e0       	ldi	r22, 0x05	; 5
 150:	8a e3       	ldi	r24, 0x3A	; 58
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN3_PIN, DIO_OUTPUT);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	66 e0       	ldi	r22, 0x06	; 6
 15c:	8a e3       	ldi	r24, 0x3A	; 58
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN4_PIN, DIO_OUTPUT);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	8a e3       	ldi	r24, 0x3A	; 58
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
 170:	08 95       	ret

00000172 <StepperMotor_TurnCW>:
}

 void StepperMotor_TurnCW(void)
 {
 172:	cf 93       	push	r28
	 uint8 u8LocalLoopIndex = 0;
	 for (u8LocalLoopIndex = 0; u8LocalLoopIndex < STEPPER_MOTOR_STATES_NUM; u8LocalLoopIndex++)
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	13 c0       	rjmp	.+38     	; 0x19e <StepperMotor_TurnCW+0x2c>
	 {
		 Dio_PortWrite(STEPPER_MOTOR_OUT_REG, gau8StepperRotation_CW[u8LocalLoopIndex]);
 178:	ec 2f       	mov	r30, r28
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 59       	subi	r30, 0x9C	; 156
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	60 81       	ld	r22, Z
 182:	8b e3       	ldi	r24, 0x3B	; 59
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_PortWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	80 e7       	ldi	r24, 0x70	; 112
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <StepperMotor_TurnCW+0x1e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <StepperMotor_TurnCW+0x28>
 19a:	00 00       	nop
}

 void StepperMotor_TurnCW(void)
 {
	 uint8 u8LocalLoopIndex = 0;
	 for (u8LocalLoopIndex = 0; u8LocalLoopIndex < STEPPER_MOTOR_STATES_NUM; u8LocalLoopIndex++)
 19c:	cf 5f       	subi	r28, 0xFF	; 255
 19e:	c4 30       	cpi	r28, 0x04	; 4
 1a0:	58 f3       	brcs	.-42     	; 0x178 <StepperMotor_TurnCW+0x6>
	 {
		 Dio_PortWrite(STEPPER_MOTOR_OUT_REG, gau8StepperRotation_CW[u8LocalLoopIndex]);
		 _delay_ms(STEPPER_STEP_DELAY_MS);
	 }
 }
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <StepperMotor_TurnCCW>:

 void StepperMotor_TurnCCW(void)
{
 1a6:	cf 93       	push	r28
	uint8 u8LocalLoopIndex = 0;
	for (u8LocalLoopIndex = 0; u8LocalLoopIndex < STEPPER_MOTOR_STATES_NUM; u8LocalLoopIndex++)
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	13 c0       	rjmp	.+38     	; 0x1d2 <StepperMotor_TurnCCW+0x2c>
	{
		Dio_PortWrite(STEPPER_MOTOR_OUT_REG, gau8StepperRotation_CCW[u8LocalLoopIndex]);
 1ac:	ec 2f       	mov	r30, r28
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e0 5a       	subi	r30, 0xA0	; 160
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	60 81       	ld	r22, Z
 1b6:	8b e3       	ldi	r24, 0x3B	; 59
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_PortWrite>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	80 e7       	ldi	r24, 0x70	; 112
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <StepperMotor_TurnCCW+0x1e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <StepperMotor_TurnCCW+0x28>
 1ce:	00 00       	nop
 }

 void StepperMotor_TurnCCW(void)
{
	uint8 u8LocalLoopIndex = 0;
	for (u8LocalLoopIndex = 0; u8LocalLoopIndex < STEPPER_MOTOR_STATES_NUM; u8LocalLoopIndex++)
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
 1d2:	c4 30       	cpi	r28, 0x04	; 4
 1d4:	58 f3       	brcs	.-42     	; 0x1ac <StepperMotor_TurnCCW+0x6>
	{
		Dio_PortWrite(STEPPER_MOTOR_OUT_REG, gau8StepperRotation_CCW[u8LocalLoopIndex]);
		_delay_ms(STEPPER_STEP_DELAY_MS);
	}
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <Sw_init>:
#define DEBOUNCE_PERIOD (20U)

DioPinStateEnum_t Sw_PrevState = SW_RELEASED;
void Sw_init(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Dio_ChannelDirectionSet   (Sw_Reg, Sw_no, DIO_INPUT);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ChannelDirectionSet>
 1e0:	08 95       	ret

000001e2 <Sw_StateGet>:
}
Sw_StateEnum_t Sw_StateGet(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
 1ea:	16 2f       	mov	r17, r22
	Sw_StateEnum_t LocalSwState = SW_RELEASED;
	
	if(Sw_PrevState != Dio_ChannelRead(Sw_Reg, Sw_no))
 1ec:	0e 94 67 00 	call	0xce	; 0xce <Dio_ChannelRead>
 1f0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
 1f4:	89 17       	cp	r24, r25
 1f6:	91 f0       	breq	.+36     	; 0x21c <Sw_StateGet+0x3a>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	89 ef       	ldi	r24, 0xF9	; 249
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <Sw_StateGet+0x1c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <Sw_StateGet+0x26>
 208:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_PERIOD);

		Sw_PrevState = Dio_ChannelRead(Sw_Reg, Sw_no);
 20a:	61 2f       	mov	r22, r17
 20c:	ce 01       	movw	r24, r28
 20e:	0e 94 67 00 	call	0xce	; 0xce <Dio_ChannelRead>
 212:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		if (Sw_PrevState == DIO_HIGH)
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	19 f4       	brne	.+6      	; 0x220 <Sw_StateGet+0x3e>
 21a:	03 c0       	rjmp	.+6      	; 0x222 <Sw_StateGet+0x40>
{
	Dio_ChannelDirectionSet   (Sw_Reg, Sw_no, DIO_INPUT);
}
Sw_StateEnum_t Sw_StateGet(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Sw_StateEnum_t LocalSwState = SW_RELEASED;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	01 c0       	rjmp	.+2      	; 0x222 <Sw_StateGet+0x40>
		{
			LocalSwState = SW_PRESSED;
		}
		else
		{
			LocalSwState = SW_RELEASED;
 220:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return LocalSwState;
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	08 95       	ret

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
