
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000890  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000890  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c97  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000acd  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009af  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a49  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a36  00000000  00000000  0000482d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00005263  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  7a:	0c 94 46 04 	jmp	0x88c	; 0x88c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Send_Instruction>:
			u8LocalLineAddress = Col | LCD_4TH_LINE_BASE;
			break;
		default:
			break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);	
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	88 e3       	ldi	r24, 0x38	; 56
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
  9e:	8f e9       	ldi	r24, 0x9F	; 159
  a0:	9f e0       	ldi	r25, 0x0F	; 15
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Send_Instruction+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Send_Instruction+0x26>
  a8:	00 00       	nop
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_Send_Instruction+0x38>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_Send_Instruction+0x3e>
  c0:	00 00       	nop
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	9c 2f       	mov	r25, r28
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	89 2b       	or	r24, r25
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Send_Instruction+0x54>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Send_Instruction+0x5a>
  dc:	00 00       	nop
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	63 e0       	ldi	r22, 0x03	; 3
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Send_Instruction+0x6c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Send_Instruction+0x72>
  f4:	00 00       	nop
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9f e0       	ldi	r25, 0x0F	; 15
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Send_Instruction+0x84>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Send_Instruction+0x8a>
 10c:	00 00       	nop
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	8b bb       	out	0x1b, r24	; 27
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	c2 95       	swap	r28
 118:	c0 7f       	andi	r28, 0xF0	; 240
 11a:	c8 2b       	or	r28, r24
 11c:	cb bb       	out	0x1b, r28	; 27
 11e:	8f e9       	ldi	r24, 0x9F	; 159
 120:	9f e0       	ldi	r25, 0x0F	; 15
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Send_Instruction+0xa0>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Send_Instruction+0xa6>
 128:	00 00       	nop
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Send_Instruction+0xb8>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Send_Instruction+0xbe>
 140:	00 00       	nop
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_Init>:
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <LCD_Init+0x6>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Init+0x10>
 156:	00 00       	nop
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	87 e3       	ldi	r24, 0x37	; 55
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 39 02 	call	0x472	; 0x472 <Dio_ChannelDirectionSet>
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	87 e3       	ldi	r24, 0x37	; 55
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 39 02 	call	0x472	; 0x472 <Dio_ChannelDirectionSet>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	87 e3       	ldi	r24, 0x37	; 55
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 39 02 	call	0x472	; 0x472 <Dio_ChannelDirectionSet>
 17c:	8a b3       	in	r24, 0x1a	; 26
 17e:	80 6f       	ori	r24, 0xF0	; 240
 180:	8a bb       	out	0x1a, r24	; 26
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 19a:	08 95       	ret

0000019c <LCD_Clear>:
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 1a2:	08 95       	ret

000001a4 <LCD_CharDisplay>:
}
void LCD_CharDisplay(uint8 Data)
{
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
	/* !Comment: RW  Should be 0  and RS should be 1 when Writing Data to LCD */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);	
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f e9       	ldi	r24, 0x9F	; 159
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_CharDisplay+0x20>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_CharDisplay+0x26>
 1ca:	00 00       	nop
	/* !Comment: Delay of Address Set 60ns minimum */
	_delay_ms(1);
	/* !Comment: Enable LCD E=1 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	88 e3       	ldi	r24, 0x38	; 56
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_CharDisplay+0x38>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_CharDisplay+0x3e>
 1e2:	00 00       	nop
	_delay_ms(1);
#if LCD_EIGHTBIT_DATA
	Dio_PortWrite(LCD_DATA_OUT_REG, Data);
#else
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= (Data & 0xF0U);
 1ea:	8b b3       	in	r24, 0x1b	; 27
 1ec:	9c 2f       	mov	r25, r28
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	89 2b       	or	r24, r25
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_CharDisplay+0x54>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_CharDisplay+0x5a>
 1fe:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	63 e0       	ldi	r22, 0x03	; 3
 204:	88 e3       	ldi	r24, 0x38	; 56
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_CharDisplay+0x6c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_CharDisplay+0x72>
 216:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
	
	/* !Comment: Enable LCD E=1  (To write the other 4-bit of the instruction)*/
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	88 e3       	ldi	r24, 0x38	; 56
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_CharDisplay+0x84>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_CharDisplay+0x8a>
 22e:	00 00       	nop
	/* !Comment: Delay for processing PW min 450ns */
	_delay_ms(1);
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= ((Data << 4U) & 0xF0U);
 236:	8b b3       	in	r24, 0x1b	; 27
 238:	c2 95       	swap	r28
 23a:	c0 7f       	andi	r28, 0xF0	; 240
 23c:	c8 2b       	or	r28, r24
 23e:	cb bb       	out	0x1b, r28	; 27
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_CharDisplay+0xa0>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_CharDisplay+0xa6>
 24a:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	88 e3       	ldi	r24, 0x38	; 56
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 57 02 	call	0x4ae	; 0x4ae <Dio_ChannelWrite>
 258:	8f e9       	ldi	r24, 0x9F	; 159
 25a:	9f e0       	ldi	r25, 0x0F	; 15
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_CharDisplay+0xb8>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_CharDisplay+0xbe>
 262:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);	
#endif
}
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <LCD_StringDisplay>:

void LCD_StringDisplay(char *Str)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	while(*Str != '\0')
 26e:	03 c0       	rjmp	.+6      	; 0x276 <LCD_StringDisplay+0xe>
	{
		LCD_CharDisplay(*Str);
 270:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_CharDisplay>
		Str++;
 274:	21 96       	adiw	r28, 0x01	; 1
#endif
}

void LCD_StringDisplay(char *Str)
{
	while(*Str != '\0')
 276:	88 81       	ld	r24, Y
 278:	81 11       	cpse	r24, r1
 27a:	fa cf       	rjmp	.-12     	; 0x270 <LCD_StringDisplay+0x8>
	{
		LCD_CharDisplay(*Str);
		Str++;
	}
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LCD_IntegerDisplay>:

void LCD_IntegerDisplay(sint32 Data)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	61 97       	sbiw	r28, 0x11	; 17
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	dc 01       	movw	r26, r24
 298:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 29a:	4a e0       	ldi	r20, 0x0A	; 10
 29c:	be 01       	movw	r22, r28
 29e:	6f 5f       	subi	r22, 0xFF	; 255
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	0e 94 11 04 	call	0x822	; 0x822 <__itoa_ncheck>
	/* !Comment: String to hold the ascii result */
	char au8LocalResult[17];
	/* !Comment: 10 for decimal */
	itoa(Data, au8LocalResult, 10);
	/* !Comment: Display The Result */
	LCD_StringDisplay(au8LocalResult);
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	0e 94 34 01 	call	0x268	; 0x268 <LCD_StringDisplay>
 2ae:	61 96       	adiw	r28, 0x11	; 17
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <TempSensor_Init>:

#include "TempSensor.h"

void TempSensor_Init(void)
{
	Adc_Init(&gStrAdc_Configuration);
 2c0:	80 e6       	ldi	r24, 0x60	; 96
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Adc_Init>
 2c8:	08 95       	ret

000002ca <TempSensor_ValueGet>:
}
uint8 TempSensor_ValueGet(void)
{
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <TempSensor_ValueGet+0x12>
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	Adc_ValueType u16LocalAdcReading = 0U;
 2e0:	1a 82       	std	Y+2, r1	; 0x02
 2e2:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16LocalAdcPrecision = 0U;
	uint8 u8LocalTemp = 0U;
	Adc_StartGroupConversion(ADC_GROUP_0);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 0d 02 	call	0x41a	; 0x41a <Adc_StartGroupConversion>
	Adc_ReadChannel(TEMP_SENSOR_PIN, gStrAdc_Configuration.Resolution, &u16LocalAdcReading);
 2ea:	10 91 64 00 	lds	r17, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 2ee:	ae 01       	movw	r20, r28
 2f0:	4f 5f       	subi	r20, 0xFF	; 255
 2f2:	5f 4f       	sbci	r21, 0xFF	; 255
 2f4:	61 2f       	mov	r22, r17
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 13 02 	call	0x426	; 0x426 <Adc_ReadChannel>
	switch(gStrAdc_Configuration.Resolution)
 2fc:	11 23       	and	r17, r17
 2fe:	29 f0       	breq	.+10     	; 0x30a <TempSensor_ValueGet+0x40>
 300:	11 30       	cpi	r17, 0x01	; 1
 302:	31 f0       	breq	.+12     	; 0x310 <TempSensor_ValueGet+0x46>
	Adc_Init(&gStrAdc_Configuration);
}
uint8 TempSensor_ValueGet(void)
{
	Adc_ValueType u16LocalAdcReading = 0U;
	uint16 u16LocalAdcPrecision = 0U;
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	05 c0       	rjmp	.+10     	; 0x314 <TempSensor_ValueGet+0x4a>
	{
		case ADC_TEN_BIT:
		u16LocalAdcPrecision = ADC_TEN_BIT_PRECISION;
		break;
		case ADC_EIGHT_BIT:
		u16LocalAdcPrecision = ADC_EIGHT_BIT_PRECISION;
 30a:	00 e0       	ldi	r16, 0x00	; 0
 30c:	11 e0       	ldi	r17, 0x01	; 1
		break;
 30e:	02 c0       	rjmp	.+4      	; 0x314 <TempSensor_ValueGet+0x4a>
	Adc_StartGroupConversion(ADC_GROUP_0);
	Adc_ReadChannel(TEMP_SENSOR_PIN, gStrAdc_Configuration.Resolution, &u16LocalAdcReading);
	switch(gStrAdc_Configuration.Resolution)
	{
		case ADC_TEN_BIT:
		u16LocalAdcPrecision = ADC_TEN_BIT_PRECISION;
 310:	0f ef       	ldi	r16, 0xFF	; 255
 312:	13 e0       	ldi	r17, 0x03	; 3
		break;
		default:
		break;
	}
	/* !Comment: Temperature Sensor equation */
	u8LocalTemp = (((u16LocalAdcReading * ADC_5_VOLT_REF) / u16LocalAdcPrecision) * 100.0) ;
 314:	69 81       	ldd	r22, Y+1	; 0x01
 316:	7a 81       	ldd	r23, Y+2	; 0x02
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 16 03 	call	0x62c	; 0x62c <__floatunsisf>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 ea       	ldi	r20, 0xA0	; 160
 326:	50 e4       	ldi	r21, 0x40	; 64
 328:	0e 94 a4 03 	call	0x748	; 0x748 <__mulsf3>
 32c:	6b 01       	movw	r12, r22
 32e:	7c 01       	movw	r14, r24
 330:	b8 01       	movw	r22, r16
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 16 03 	call	0x62c	; 0x62c <__floatunsisf>
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	0e 94 75 02 	call	0x4ea	; 0x4ea <__divsf3>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	48 ec       	ldi	r20, 0xC8	; 200
 34c:	52 e4       	ldi	r21, 0x42	; 66
 34e:	0e 94 a4 03 	call	0x748	; 0x748 <__mulsf3>
 352:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fixunssfsi>
 356:	86 2f       	mov	r24, r22
	
	return (u8LocalTemp);	
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	08 95       	ret

0000036e <main>:
#include "TempSensor.h"
#include <util/delay.h>

int main(void)
{
    TempSensor_Init();
 36e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <TempSensor_Init>
	LCD_Init();
 372:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Init>
	uint8 u8TempReading = 0;
    while (1) 
    {
		u8TempReading = TempSensor_ValueGet();
 376:	0e 94 65 01 	call	0x2ca	; 0x2ca <TempSensor_ValueGet>
		LCD_IntegerDisplay(u8TempReading);
 37a:	68 2f       	mov	r22, r24
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 41 01 	call	0x282	; 0x282 <LCD_IntegerDisplay>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	89 e6       	ldi	r24, 0x69	; 105
 38a:	98 e1       	ldi	r25, 0x18	; 24
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x1e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x28>
 396:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
 398:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Clear>
 39c:	ec cf       	rjmp	.-40     	; 0x376 <main+0x8>

0000039e <Adc_ConvStateGet>:
{
	/* !Comment: Stop conversion of the specified ADC Group */
	switch(Group)
	{
		case ADC_GROUP_0:
		CLEAR_BIT(*ADC_CTRL_STATUS_A_REG, ADC_START_CONV_BIT_NUM);
 39e:	34 99       	sbic	0x06, 4	; 6
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <Adc_ConvStateGet+0x8>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	08 95       	ret

000003aa <Adc_Init>:
 3aa:	fc 01       	movw	r30, r24
 3ac:	17 b8       	out	0x07, r1	; 7
 3ae:	16 b8       	out	0x06, r1	; 6
 3b0:	80 b7       	in	r24, 0x30	; 48
 3b2:	8f 71       	andi	r24, 0x1F	; 31
 3b4:	80 bf       	out	0x30, r24	; 48
 3b6:	80 81       	ld	r24, Z
 3b8:	81 11       	cpse	r24, r1
 3ba:	2e c0       	rjmp	.+92     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3bc:	82 81       	ldd	r24, Z+2	; 0x02
 3be:	88 23       	and	r24, r24
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <Adc_Init+0x1e>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	39 f0       	breq	.+14     	; 0x3d4 <Adc_Init+0x2a>
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <Adc_Init+0x38>
 3c8:	86 b1       	in	r24, 0x06	; 6
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	86 b9       	out	0x06, r24	; 6
 3ce:	80 b7       	in	r24, 0x30	; 48
 3d0:	80 bf       	out	0x30, r24	; 48
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <Adc_Init+0x38>
 3d4:	86 b1       	in	r24, 0x06	; 6
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	86 b9       	out	0x06, r24	; 6
 3da:	90 b7       	in	r25, 0x30	; 48
 3dc:	85 81       	ldd	r24, Z+5	; 0x05
 3de:	89 2b       	or	r24, r25
 3e0:	80 bf       	out	0x30, r24	; 48
 3e2:	97 b1       	in	r25, 0x07	; 7
 3e4:	81 81       	ldd	r24, Z+1	; 0x01
 3e6:	89 2b       	or	r24, r25
 3e8:	87 b9       	out	0x07, r24	; 7
 3ea:	84 81       	ldd	r24, Z+4	; 0x04
 3ec:	88 23       	and	r24, r24
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <Adc_Init+0x4c>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	29 f0       	breq	.+10     	; 0x3fe <Adc_Init+0x54>
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f6:	87 b1       	in	r24, 0x07	; 7
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	87 b9       	out	0x07, r24	; 7
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	97 b1       	in	r25, 0x07	; 7
 400:	86 81       	ldd	r24, Z+6	; 0x06
 402:	89 2b       	or	r24, r25
 404:	87 b9       	out	0x07, r24	; 7
 406:	96 b1       	in	r25, 0x06	; 6
 408:	23 81       	ldd	r18, Z+3	; 0x03
 40a:	87 81       	ldd	r24, Z+7	; 0x07
 40c:	82 2b       	or	r24, r18
 40e:	89 2b       	or	r24, r25
 410:	86 b9       	out	0x06, r24	; 6
 412:	86 b1       	in	r24, 0x06	; 6
 414:	80 68       	ori	r24, 0x80	; 128
 416:	86 b9       	out	0x06, r24	; 6
 418:	08 95       	ret

0000041a <Adc_StartGroupConversion>:
 41a:	81 11       	cpse	r24, r1
 41c:	03 c0       	rjmp	.+6      	; 0x424 <Adc_StartGroupConversion+0xa>
 41e:	86 b1       	in	r24, 0x06	; 6
 420:	80 64       	ori	r24, 0x40	; 64
 422:	86 b9       	out	0x06, r24	; 6
 424:	08 95       	ret

00000426 <Adc_ReadChannel>:
		break;
	}	
}

void Adc_ReadChannel(Adc_ChannelType Channel, Adc_ResolutionType Resolution, Adc_ValueType *DataBufferPtr)
{
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	c6 2f       	mov	r28, r22
 42e:	8a 01       	movw	r16, r20
	/* !Comment: Clear the channel selection bits in the ADMUX register */
	*ADC_MUX_REG &= 0xE0U;
 430:	97 b1       	in	r25, 0x07	; 7
 432:	90 7e       	andi	r25, 0xE0	; 224
 434:	97 b9       	out	0x07, r25	; 7
	/* !Comment: Select the required channel to read the result from it */
	*ADC_MUX_REG |= Channel;
 436:	97 b1       	in	r25, 0x07	; 7
 438:	89 2b       	or	r24, r25
 43a:	87 b9       	out	0x07, r24	; 7
	/* !Comment: Wait until the Conversion is finished */
	while (Adc_ConvStateGet() == ADC_BUSY)
 43c:	0e 94 cf 01 	call	0x39e	; 0x39e <Adc_ConvStateGet>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	e1 f3       	breq	.-8      	; 0x43c <Adc_ReadChannel+0x16>
	{
		/* Do Nothing */
	}
	/* !Comment: Read the result when the conversion is completed */
	switch(Resolution)
 444:	cc 23       	and	r28, r28
 446:	19 f0       	breq	.+6      	; 0x44e <Adc_ReadChannel+0x28>
 448:	c1 30       	cpi	r28, 0x01	; 1
 44a:	39 f0       	breq	.+14     	; 0x45a <Adc_ReadChannel+0x34>
 44c:	0b c0       	rjmp	.+22     	; 0x464 <Adc_ReadChannel+0x3e>
	{
		case ADC_EIGHT_BIT:
		*DataBufferPtr = *ADC_DATA_HIGH_REG;
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	f8 01       	movw	r30, r16
 454:	91 83       	std	Z+1, r25	; 0x01
 456:	80 83       	st	Z, r24
		break;
 458:	05 c0       	rjmp	.+10     	; 0x464 <Adc_ReadChannel+0x3e>
		case ADC_TEN_BIT:
		*DataBufferPtr = *(uint16*)ADC_DATA_LOW_REG;
 45a:	84 b1       	in	r24, 0x04	; 4
 45c:	95 b1       	in	r25, 0x05	; 5
 45e:	f8 01       	movw	r30, r16
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	/* !Comment: Clear the ADIF by writing logic one after reading the result */
	SET_BIT(*ADC_CTRL_STATUS_A_REG, ADC_INT_FLAG_BIT_NUM);
 464:	86 b1       	in	r24, 0x06	; 6
 466:	80 61       	ori	r24, 0x10	; 16
 468:	86 b9       	out	0x06, r24	; 6
}
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
 472:	44 23       	and	r20, r20
 474:	19 f0       	breq	.+6      	; 0x47c <Dio_ChannelDirectionSet+0xa>
 476:	41 30       	cpi	r20, 0x01	; 1
 478:	71 f0       	breq	.+28     	; 0x496 <Dio_ChannelDirectionSet+0x24>
 47a:	08 95       	ret
 47c:	fc 01       	movw	r30, r24
 47e:	40 81       	ld	r20, Z
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <Dio_ChannelDirectionSet+0x18>
 486:	22 0f       	add	r18, r18
 488:	33 1f       	adc	r19, r19
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <Dio_ChannelDirectionSet+0x14>
 48e:	20 95       	com	r18
 490:	24 23       	and	r18, r20
 492:	20 83       	st	Z, r18
 494:	08 95       	ret
 496:	fc 01       	movw	r30, r24
 498:	40 81       	ld	r20, Z
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <Dio_ChannelDirectionSet+0x32>
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <Dio_ChannelDirectionSet+0x2e>
 4a8:	24 2b       	or	r18, r20
 4aa:	20 83       	st	Z, r18
 4ac:	08 95       	ret

000004ae <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
 4ae:	44 23       	and	r20, r20
 4b0:	19 f0       	breq	.+6      	; 0x4b8 <Dio_ChannelWrite+0xa>
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	71 f0       	breq	.+28     	; 0x4d2 <Dio_ChannelWrite+0x24>
 4b6:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
 4b8:	fc 01       	movw	r30, r24
 4ba:	40 81       	ld	r20, Z
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <Dio_ChannelWrite+0x18>
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <Dio_ChannelWrite+0x14>
 4ca:	20 95       	com	r18
 4cc:	24 23       	and	r18, r20
 4ce:	20 83       	st	Z, r18
		break;
 4d0:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
 4d2:	fc 01       	movw	r30, r24
 4d4:	40 81       	ld	r20, Z
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Dio_ChannelWrite+0x32>
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <Dio_ChannelWrite+0x2e>
 4e4:	24 2b       	or	r18, r20
 4e6:	20 83       	st	Z, r18
 4e8:	08 95       	ret

000004ea <__divsf3>:
 4ea:	0e 94 89 02 	call	0x512	; 0x512 <__divsf3x>
 4ee:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_round>
 4f2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_pscB>
 4f6:	58 f0       	brcs	.+22     	; 0x50e <__divsf3+0x24>
 4f8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_pscA>
 4fc:	40 f0       	brcs	.+16     	; 0x50e <__divsf3+0x24>
 4fe:	29 f4       	brne	.+10     	; 0x50a <__divsf3+0x20>
 500:	5f 3f       	cpi	r21, 0xFF	; 255
 502:	29 f0       	breq	.+10     	; 0x50e <__divsf3+0x24>
 504:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_inf>
 508:	51 11       	cpse	r21, r1
 50a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>
 50e:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_nan>

00000512 <__divsf3x>:
 512:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_split3>
 516:	68 f3       	brcs	.-38     	; 0x4f2 <__divsf3+0x8>

00000518 <__divsf3_pse>:
 518:	99 23       	and	r25, r25
 51a:	b1 f3       	breq	.-20     	; 0x508 <__divsf3+0x1e>
 51c:	55 23       	and	r21, r21
 51e:	91 f3       	breq	.-28     	; 0x504 <__divsf3+0x1a>
 520:	95 1b       	sub	r25, r21
 522:	55 0b       	sbc	r21, r21
 524:	bb 27       	eor	r27, r27
 526:	aa 27       	eor	r26, r26
 528:	62 17       	cp	r22, r18
 52a:	73 07       	cpc	r23, r19
 52c:	84 07       	cpc	r24, r20
 52e:	38 f0       	brcs	.+14     	; 0x53e <__divsf3_pse+0x26>
 530:	9f 5f       	subi	r25, 0xFF	; 255
 532:	5f 4f       	sbci	r21, 0xFF	; 255
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	44 1f       	adc	r20, r20
 53a:	aa 1f       	adc	r26, r26
 53c:	a9 f3       	breq	.-22     	; 0x528 <__divsf3_pse+0x10>
 53e:	35 d0       	rcall	.+106    	; 0x5aa <__divsf3_pse+0x92>
 540:	0e 2e       	mov	r0, r30
 542:	3a f0       	brmi	.+14     	; 0x552 <__divsf3_pse+0x3a>
 544:	e0 e8       	ldi	r30, 0x80	; 128
 546:	32 d0       	rcall	.+100    	; 0x5ac <__divsf3_pse+0x94>
 548:	91 50       	subi	r25, 0x01	; 1
 54a:	50 40       	sbci	r21, 0x00	; 0
 54c:	e6 95       	lsr	r30
 54e:	00 1c       	adc	r0, r0
 550:	ca f7       	brpl	.-14     	; 0x544 <__divsf3_pse+0x2c>
 552:	2b d0       	rcall	.+86     	; 0x5aa <__divsf3_pse+0x92>
 554:	fe 2f       	mov	r31, r30
 556:	29 d0       	rcall	.+82     	; 0x5aa <__divsf3_pse+0x92>
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	bb 1f       	adc	r27, r27
 560:	26 17       	cp	r18, r22
 562:	37 07       	cpc	r19, r23
 564:	48 07       	cpc	r20, r24
 566:	ab 07       	cpc	r26, r27
 568:	b0 e8       	ldi	r27, 0x80	; 128
 56a:	09 f0       	breq	.+2      	; 0x56e <__divsf3_pse+0x56>
 56c:	bb 0b       	sbc	r27, r27
 56e:	80 2d       	mov	r24, r0
 570:	bf 01       	movw	r22, r30
 572:	ff 27       	eor	r31, r31
 574:	93 58       	subi	r25, 0x83	; 131
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	3a f0       	brmi	.+14     	; 0x588 <__divsf3_pse+0x70>
 57a:	9e 3f       	cpi	r25, 0xFE	; 254
 57c:	51 05       	cpc	r21, r1
 57e:	78 f0       	brcs	.+30     	; 0x59e <__divsf3_pse+0x86>
 580:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_inf>
 584:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>
 588:	5f 3f       	cpi	r21, 0xFF	; 255
 58a:	e4 f3       	brlt	.-8      	; 0x584 <__divsf3_pse+0x6c>
 58c:	98 3e       	cpi	r25, 0xE8	; 232
 58e:	d4 f3       	brlt	.-12     	; 0x584 <__divsf3_pse+0x6c>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b7 95       	ror	r27
 598:	f7 95       	ror	r31
 59a:	9f 5f       	subi	r25, 0xFF	; 255
 59c:	c9 f7       	brne	.-14     	; 0x590 <__divsf3_pse+0x78>
 59e:	88 0f       	add	r24, r24
 5a0:	91 1d       	adc	r25, r1
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	97 f9       	bld	r25, 7
 5a8:	08 95       	ret
 5aa:	e1 e0       	ldi	r30, 0x01	; 1
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	bb 1f       	adc	r27, r27
 5b4:	62 17       	cp	r22, r18
 5b6:	73 07       	cpc	r23, r19
 5b8:	84 07       	cpc	r24, r20
 5ba:	ba 07       	cpc	r27, r26
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__divsf3_pse+0xae>
 5be:	62 1b       	sub	r22, r18
 5c0:	73 0b       	sbc	r23, r19
 5c2:	84 0b       	sbc	r24, r20
 5c4:	ba 0b       	sbc	r27, r26
 5c6:	ee 1f       	adc	r30, r30
 5c8:	88 f7       	brcc	.-30     	; 0x5ac <__divsf3_pse+0x94>
 5ca:	e0 95       	com	r30
 5cc:	08 95       	ret

000005ce <__fixunssfsi>:
 5ce:	0e 94 83 03 	call	0x706	; 0x706 <__fp_splitA>
 5d2:	88 f0       	brcs	.+34     	; 0x5f6 <__fixunssfsi+0x28>
 5d4:	9f 57       	subi	r25, 0x7F	; 127
 5d6:	98 f0       	brcs	.+38     	; 0x5fe <__fixunssfsi+0x30>
 5d8:	b9 2f       	mov	r27, r25
 5da:	99 27       	eor	r25, r25
 5dc:	b7 51       	subi	r27, 0x17	; 23
 5de:	b0 f0       	brcs	.+44     	; 0x60c <__fixunssfsi+0x3e>
 5e0:	e1 f0       	breq	.+56     	; 0x61a <__fixunssfsi+0x4c>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	1a f0       	brmi	.+6      	; 0x5f2 <__fixunssfsi+0x24>
 5ec:	ba 95       	dec	r27
 5ee:	c9 f7       	brne	.-14     	; 0x5e2 <__fixunssfsi+0x14>
 5f0:	14 c0       	rjmp	.+40     	; 0x61a <__fixunssfsi+0x4c>
 5f2:	b1 30       	cpi	r27, 0x01	; 1
 5f4:	91 f0       	breq	.+36     	; 0x61a <__fixunssfsi+0x4c>
 5f6:	0e 94 9d 03 	call	0x73a	; 0x73a <__fp_zero>
 5fa:	b1 e0       	ldi	r27, 0x01	; 1
 5fc:	08 95       	ret
 5fe:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_zero>
 602:	67 2f       	mov	r22, r23
 604:	78 2f       	mov	r23, r24
 606:	88 27       	eor	r24, r24
 608:	b8 5f       	subi	r27, 0xF8	; 248
 60a:	39 f0       	breq	.+14     	; 0x61a <__fixunssfsi+0x4c>
 60c:	b9 3f       	cpi	r27, 0xF9	; 249
 60e:	cc f3       	brlt	.-14     	; 0x602 <__fixunssfsi+0x34>
 610:	86 95       	lsr	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b3 95       	inc	r27
 618:	d9 f7       	brne	.-10     	; 0x610 <__fixunssfsi+0x42>
 61a:	3e f4       	brtc	.+14     	; 0x62a <__fixunssfsi+0x5c>
 61c:	90 95       	com	r25
 61e:	80 95       	com	r24
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__floatunsisf>:
 62c:	e8 94       	clt
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__floatsisf+0x12>

00000630 <__floatsisf>:
 630:	97 fb       	bst	r25, 7
 632:	3e f4       	brtc	.+14     	; 0x642 <__floatsisf+0x12>
 634:	90 95       	com	r25
 636:	80 95       	com	r24
 638:	70 95       	com	r23
 63a:	61 95       	neg	r22
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	8f 4f       	sbci	r24, 0xFF	; 255
 640:	9f 4f       	sbci	r25, 0xFF	; 255
 642:	99 23       	and	r25, r25
 644:	a9 f0       	breq	.+42     	; 0x670 <__floatsisf+0x40>
 646:	f9 2f       	mov	r31, r25
 648:	96 e9       	ldi	r25, 0x96	; 150
 64a:	bb 27       	eor	r27, r27
 64c:	93 95       	inc	r25
 64e:	f6 95       	lsr	r31
 650:	87 95       	ror	r24
 652:	77 95       	ror	r23
 654:	67 95       	ror	r22
 656:	b7 95       	ror	r27
 658:	f1 11       	cpse	r31, r1
 65a:	f8 cf       	rjmp	.-16     	; 0x64c <__floatsisf+0x1c>
 65c:	fa f4       	brpl	.+62     	; 0x69c <__floatsisf+0x6c>
 65e:	bb 0f       	add	r27, r27
 660:	11 f4       	brne	.+4      	; 0x666 <__floatsisf+0x36>
 662:	60 ff       	sbrs	r22, 0
 664:	1b c0       	rjmp	.+54     	; 0x69c <__floatsisf+0x6c>
 666:	6f 5f       	subi	r22, 0xFF	; 255
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	16 c0       	rjmp	.+44     	; 0x69c <__floatsisf+0x6c>
 670:	88 23       	and	r24, r24
 672:	11 f0       	breq	.+4      	; 0x678 <__floatsisf+0x48>
 674:	96 e9       	ldi	r25, 0x96	; 150
 676:	11 c0       	rjmp	.+34     	; 0x69a <__floatsisf+0x6a>
 678:	77 23       	and	r23, r23
 67a:	21 f0       	breq	.+8      	; 0x684 <__floatsisf+0x54>
 67c:	9e e8       	ldi	r25, 0x8E	; 142
 67e:	87 2f       	mov	r24, r23
 680:	76 2f       	mov	r23, r22
 682:	05 c0       	rjmp	.+10     	; 0x68e <__floatsisf+0x5e>
 684:	66 23       	and	r22, r22
 686:	71 f0       	breq	.+28     	; 0x6a4 <__floatsisf+0x74>
 688:	96 e8       	ldi	r25, 0x86	; 134
 68a:	86 2f       	mov	r24, r22
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	2a f0       	brmi	.+10     	; 0x69c <__floatsisf+0x6c>
 692:	9a 95       	dec	r25
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	88 1f       	adc	r24, r24
 69a:	da f7       	brpl	.-10     	; 0x692 <__floatsisf+0x62>
 69c:	88 0f       	add	r24, r24
 69e:	96 95       	lsr	r25
 6a0:	87 95       	ror	r24
 6a2:	97 f9       	bld	r25, 7
 6a4:	08 95       	ret

000006a6 <__fp_inf>:
 6a6:	97 f9       	bld	r25, 7
 6a8:	9f 67       	ori	r25, 0x7F	; 127
 6aa:	80 e8       	ldi	r24, 0x80	; 128
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	08 95       	ret

000006b2 <__fp_nan>:
 6b2:	9f ef       	ldi	r25, 0xFF	; 255
 6b4:	80 ec       	ldi	r24, 0xC0	; 192
 6b6:	08 95       	ret

000006b8 <__fp_pscA>:
 6b8:	00 24       	eor	r0, r0
 6ba:	0a 94       	dec	r0
 6bc:	16 16       	cp	r1, r22
 6be:	17 06       	cpc	r1, r23
 6c0:	18 06       	cpc	r1, r24
 6c2:	09 06       	cpc	r0, r25
 6c4:	08 95       	ret

000006c6 <__fp_pscB>:
 6c6:	00 24       	eor	r0, r0
 6c8:	0a 94       	dec	r0
 6ca:	12 16       	cp	r1, r18
 6cc:	13 06       	cpc	r1, r19
 6ce:	14 06       	cpc	r1, r20
 6d0:	05 06       	cpc	r0, r21
 6d2:	08 95       	ret

000006d4 <__fp_round>:
 6d4:	09 2e       	mov	r0, r25
 6d6:	03 94       	inc	r0
 6d8:	00 0c       	add	r0, r0
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0xc>
 6dc:	88 23       	and	r24, r24
 6de:	52 f0       	brmi	.+20     	; 0x6f4 <__fp_round+0x20>
 6e0:	bb 0f       	add	r27, r27
 6e2:	40 f4       	brcc	.+16     	; 0x6f4 <__fp_round+0x20>
 6e4:	bf 2b       	or	r27, r31
 6e6:	11 f4       	brne	.+4      	; 0x6ec <__fp_round+0x18>
 6e8:	60 ff       	sbrs	r22, 0
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__fp_round+0x20>
 6ec:	6f 5f       	subi	r22, 0xFF	; 255
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <__fp_split3>:
 6f6:	57 fd       	sbrc	r21, 7
 6f8:	90 58       	subi	r25, 0x80	; 128
 6fa:	44 0f       	add	r20, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	59 f0       	breq	.+22     	; 0x716 <__fp_splitA+0x10>
 700:	5f 3f       	cpi	r21, 0xFF	; 255
 702:	71 f0       	breq	.+28     	; 0x720 <__fp_splitA+0x1a>
 704:	47 95       	ror	r20

00000706 <__fp_splitA>:
 706:	88 0f       	add	r24, r24
 708:	97 fb       	bst	r25, 7
 70a:	99 1f       	adc	r25, r25
 70c:	61 f0       	breq	.+24     	; 0x726 <__fp_splitA+0x20>
 70e:	9f 3f       	cpi	r25, 0xFF	; 255
 710:	79 f0       	breq	.+30     	; 0x730 <__fp_splitA+0x2a>
 712:	87 95       	ror	r24
 714:	08 95       	ret
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	14 06       	cpc	r1, r20
 71c:	55 1f       	adc	r21, r21
 71e:	f2 cf       	rjmp	.-28     	; 0x704 <__fp_split3+0xe>
 720:	46 95       	lsr	r20
 722:	f1 df       	rcall	.-30     	; 0x706 <__fp_splitA>
 724:	08 c0       	rjmp	.+16     	; 0x736 <__fp_splitA+0x30>
 726:	16 16       	cp	r1, r22
 728:	17 06       	cpc	r1, r23
 72a:	18 06       	cpc	r1, r24
 72c:	99 1f       	adc	r25, r25
 72e:	f1 cf       	rjmp	.-30     	; 0x712 <__fp_splitA+0xc>
 730:	86 95       	lsr	r24
 732:	71 05       	cpc	r23, r1
 734:	61 05       	cpc	r22, r1
 736:	08 94       	sec
 738:	08 95       	ret

0000073a <__fp_zero>:
 73a:	e8 94       	clt

0000073c <__fp_szero>:
 73c:	bb 27       	eor	r27, r27
 73e:	66 27       	eor	r22, r22
 740:	77 27       	eor	r23, r23
 742:	cb 01       	movw	r24, r22
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret

00000748 <__mulsf3>:
 748:	0e 94 b7 03 	call	0x76e	; 0x76e <__mulsf3x>
 74c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_round>
 750:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_pscA>
 754:	38 f0       	brcs	.+14     	; 0x764 <__mulsf3+0x1c>
 756:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_pscB>
 75a:	20 f0       	brcs	.+8      	; 0x764 <__mulsf3+0x1c>
 75c:	95 23       	and	r25, r21
 75e:	11 f0       	breq	.+4      	; 0x764 <__mulsf3+0x1c>
 760:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_inf>
 764:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_nan>
 768:	11 24       	eor	r1, r1
 76a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>

0000076e <__mulsf3x>:
 76e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_split3>
 772:	70 f3       	brcs	.-36     	; 0x750 <__mulsf3+0x8>

00000774 <__mulsf3_pse>:
 774:	95 9f       	mul	r25, r21
 776:	c1 f3       	breq	.-16     	; 0x768 <__mulsf3+0x20>
 778:	95 0f       	add	r25, r21
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	55 1f       	adc	r21, r21
 77e:	62 9f       	mul	r22, r18
 780:	f0 01       	movw	r30, r0
 782:	72 9f       	mul	r23, r18
 784:	bb 27       	eor	r27, r27
 786:	f0 0d       	add	r31, r0
 788:	b1 1d       	adc	r27, r1
 78a:	63 9f       	mul	r22, r19
 78c:	aa 27       	eor	r26, r26
 78e:	f0 0d       	add	r31, r0
 790:	b1 1d       	adc	r27, r1
 792:	aa 1f       	adc	r26, r26
 794:	64 9f       	mul	r22, r20
 796:	66 27       	eor	r22, r22
 798:	b0 0d       	add	r27, r0
 79a:	a1 1d       	adc	r26, r1
 79c:	66 1f       	adc	r22, r22
 79e:	82 9f       	mul	r24, r18
 7a0:	22 27       	eor	r18, r18
 7a2:	b0 0d       	add	r27, r0
 7a4:	a1 1d       	adc	r26, r1
 7a6:	62 1f       	adc	r22, r18
 7a8:	73 9f       	mul	r23, r19
 7aa:	b0 0d       	add	r27, r0
 7ac:	a1 1d       	adc	r26, r1
 7ae:	62 1f       	adc	r22, r18
 7b0:	83 9f       	mul	r24, r19
 7b2:	a0 0d       	add	r26, r0
 7b4:	61 1d       	adc	r22, r1
 7b6:	22 1f       	adc	r18, r18
 7b8:	74 9f       	mul	r23, r20
 7ba:	33 27       	eor	r19, r19
 7bc:	a0 0d       	add	r26, r0
 7be:	61 1d       	adc	r22, r1
 7c0:	23 1f       	adc	r18, r19
 7c2:	84 9f       	mul	r24, r20
 7c4:	60 0d       	add	r22, r0
 7c6:	21 1d       	adc	r18, r1
 7c8:	82 2f       	mov	r24, r18
 7ca:	76 2f       	mov	r23, r22
 7cc:	6a 2f       	mov	r22, r26
 7ce:	11 24       	eor	r1, r1
 7d0:	9f 57       	subi	r25, 0x7F	; 127
 7d2:	50 40       	sbci	r21, 0x00	; 0
 7d4:	9a f0       	brmi	.+38     	; 0x7fc <__mulsf3_pse+0x88>
 7d6:	f1 f0       	breq	.+60     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7d8:	88 23       	and	r24, r24
 7da:	4a f0       	brmi	.+18     	; 0x7ee <__mulsf3_pse+0x7a>
 7dc:	ee 0f       	add	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	bb 1f       	adc	r27, r27
 7e2:	66 1f       	adc	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	91 50       	subi	r25, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__mulsf3_pse+0x64>
 7ee:	9e 3f       	cpi	r25, 0xFE	; 254
 7f0:	51 05       	cpc	r21, r1
 7f2:	80 f0       	brcs	.+32     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f4:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_inf>
 7f8:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_szero>
 7fc:	5f 3f       	cpi	r21, 0xFF	; 255
 7fe:	e4 f3       	brlt	.-8      	; 0x7f8 <__mulsf3_pse+0x84>
 800:	98 3e       	cpi	r25, 0xE8	; 232
 802:	d4 f3       	brlt	.-12     	; 0x7f8 <__mulsf3_pse+0x84>
 804:	86 95       	lsr	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f7 95       	ror	r31
 80e:	e7 95       	ror	r30
 810:	9f 5f       	subi	r25, 0xFF	; 255
 812:	c1 f7       	brne	.-16     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 814:	fe 2b       	or	r31, r30
 816:	88 0f       	add	r24, r24
 818:	91 1d       	adc	r25, r1
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	97 f9       	bld	r25, 7
 820:	08 95       	ret

00000822 <__itoa_ncheck>:
 822:	bb 27       	eor	r27, r27
 824:	4a 30       	cpi	r20, 0x0A	; 10
 826:	31 f4       	brne	.+12     	; 0x834 <__itoa_ncheck+0x12>
 828:	99 23       	and	r25, r25
 82a:	22 f4       	brpl	.+8      	; 0x834 <__itoa_ncheck+0x12>
 82c:	bd e2       	ldi	r27, 0x2D	; 45
 82e:	90 95       	com	r25
 830:	81 95       	neg	r24
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__utoa_common>

00000838 <__utoa_ncheck>:
 838:	bb 27       	eor	r27, r27

0000083a <__utoa_common>:
 83a:	fb 01       	movw	r30, r22
 83c:	55 27       	eor	r21, r21
 83e:	aa 27       	eor	r26, r26
 840:	88 0f       	add	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	aa 1f       	adc	r26, r26
 846:	a4 17       	cp	r26, r20
 848:	10 f0       	brcs	.+4      	; 0x84e <__utoa_common+0x14>
 84a:	a4 1b       	sub	r26, r20
 84c:	83 95       	inc	r24
 84e:	50 51       	subi	r21, 0x10	; 16
 850:	b9 f7       	brne	.-18     	; 0x840 <__utoa_common+0x6>
 852:	a0 5d       	subi	r26, 0xD0	; 208
 854:	aa 33       	cpi	r26, 0x3A	; 58
 856:	08 f0       	brcs	.+2      	; 0x85a <__utoa_common+0x20>
 858:	a9 5d       	subi	r26, 0xD9	; 217
 85a:	a1 93       	st	Z+, r26
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	79 f7       	brne	.-34     	; 0x83e <__utoa_common+0x4>
 860:	b1 11       	cpse	r27, r1
 862:	b1 93       	st	Z+, r27
 864:	11 92       	st	Z+, r1
 866:	cb 01       	movw	r24, r22
 868:	0c 94 36 04 	jmp	0x86c	; 0x86c <strrev>

0000086c <strrev>:
 86c:	dc 01       	movw	r26, r24
 86e:	fc 01       	movw	r30, r24
 870:	67 2f       	mov	r22, r23
 872:	71 91       	ld	r23, Z+
 874:	77 23       	and	r23, r23
 876:	e1 f7       	brne	.-8      	; 0x870 <strrev+0x4>
 878:	32 97       	sbiw	r30, 0x02	; 2
 87a:	04 c0       	rjmp	.+8      	; 0x884 <strrev+0x18>
 87c:	7c 91       	ld	r23, X
 87e:	6d 93       	st	X+, r22
 880:	70 83       	st	Z, r23
 882:	62 91       	ld	r22, -Z
 884:	ae 17       	cp	r26, r30
 886:	bf 07       	cpc	r27, r31
 888:	c8 f3       	brcs	.-14     	; 0x87c <strrev+0x10>
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>
